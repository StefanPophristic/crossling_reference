var safeDivide = function(x , y){
  if(y == 0) {
  return(0)
  } else {
  return(x / y)
  }
}

var getTransitions = function(str) {
  var result = []
  var splitStr = str.split(" ")
  var indices = _.range(splitStr.length)
  map(function(i) {
    var transition = (splitStr.slice(0,i + 1)).join(" ")
    result.push(transition)
    },indices)
  return result
}

var licitTransitions = function(utterances) {
  return _.uniq(_.flatten(map(function(x) { 
  return getTransitions(x) }, utterances)))
} 

var wordPrior = function() {
  return uniformDraw(words)
}

var stringCost = function(string) {
  var wordcosts = map(function(x) {return wordCost(x)}, string)
  return sum(wordcosts)
}

var stringMeanings = function (context, state) {
  // print(context)
  var cSplit = context.split(" ")
     var meaning = wordMeanings(state)
    return reduce(function(x, acc) { return meaning[x] * acc; }, 1, cSplit) }

// outputs values on the interval [0,1]: a string s's semantic value at a world w 
// is the sum of semantic values of complete continuations of s true at w, 
// divided by the total number of complete continuations of s:
var stringSemantics = function(context, state, utterances) {
  var allContinuations = filter(function(x) {
    return x.startsWith(context)
  } , utterances)
  // print(allContinuations)
  var trueContinuations = reduce(function(x, acc) { return stringMeanings(x, state) + acc; }, 0, allContinuations)
  return safeDivide(trueContinuations,allContinuations.length)
}

var globalLiteralListener =  function(utterance, states) {
  return Infer(function() {
    var state = uniformDraw(states)
    var meaning = stringMeanings(utterance,state)
if(sizeNoiseVal == 1 & colorNoiseVal == 1) {
  condition(meaning)
  } else {
  factor(meaning)
  } 
    return state
  }
)}

var globalUtteranceSpeaker = function (state, states, utterances) {
  return Infer({model: function() {
  var utterance = uniformDraw(utterances)
  var listener = globalLiteralListener(utterance, states)
  factor(alpha * (listener.score(state) - stringCost(utterance.split(" "))))
    return utterance } })
}

// literal listener
var incrementalLiteralListener = function(string, states, utterances) {
  return Infer({model: function(){
    var state = uniformDraw(states)
    var meaning = Math.log(stringSemantics(string, state, utterances))
    factor(meaning)
    return state
  }}
)}

var wordSpeaker = function(context, state, states, utterances,alpha) {
  return Infer({model: function(){
    var word = wordPrior()
    var newContext = context.concat([word])
    // grammar constraint: linear order must be allowed in language
    // print(newContext)
    condition(licitTransitions(utterances).includes(newContext.join(" "))) 
    // note: condition basically goes away
    var result = (stringMeanings(context.join(" "),state) == 0) ? 1 : alpha * (incrementalLiteralListener(newContext.join(" "),states,utterances).score(state) - stringCost(newContext))
    factor(result)
    return word
  }})
}

var pragmaticWordListener = function(word, context, states, utterances) {
  return Infer({model: function(){
    var state = uniformDraw(states)
    factor(wordSpeaker(state,context,states,utterances).score(word))
    return state
  }})
}

// S1^{UTT-IP} from the paper: defined according to equation 7
var incrementalUtteranceSpeaker = function(utt, state, states, utterances, alpha) {
  var string = utt.split(" ")
    var indices = _.range(string.length)
    var probs = map(function(i) {
        var context = string.slice(0,i) 
        // print(context)
        return Math.exp(wordSpeaker(context,state,states,utterances,alpha).score(string[i]))  
    },indices)
    return reduce(function(x, acc) { return x * acc; }, 1, probs)
}
