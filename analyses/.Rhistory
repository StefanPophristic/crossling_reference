geom_bar(stat="identity") +
theme_bw() # +
# annotate("text", x = 0.75, y = 0, label = sprintf("r = %f", cor(d$observedMention,d$predictedMention)))
}
vanillaPredictives <- webppl(vanillaPredictionScript, data = DF, data_var = "df")
graphPredictives(vanillaPredictives, DF)
graphPredictives(vanillaPredictives, DF)
graphPredictives <- function(predictives, df) {
d <- cbind(predictives,df)
d <- d[, !duplicated(colnames(d))] %>%
gather("type", "value", predictedMention, observedMention) %>%
group_by(language,type) %>%
summarize(mean = mean(value))
ggplot()
ggplot(d, aes(x = type, y = mean, fill = language)) +
# facet_wrap(~kind) +
geom_bar(stat="identity") +
theme_bw() # +
# annotate("text", x = 0.75, y = 0, label = sprintf("r = %f", cor(d$observedMention,d$predictedMention)))
}
graphPredictives <- function(predictives, df) {
d <- cbind(predictives,df)
d <- d[, !duplicated(colnames(d))] %>%
gather("type", "value", predictedMention, observedMention) %>%
group_by(language,type,kind) %>%
summarize(mean = mean(value))
ggplot()
ggplot(d, aes(x = type, y = mean, fill = language)) +
facet_wrap(~kind) +
geom_bar(stat="identity") +
theme_bw() # +
# annotate("text", x = 0.75, y = 0, label = sprintf("r = %f", cor(d$observedMention,d$predictedMention)))
}
graphPredictives(vanillaPredictives, DF)
graphPredictives <- function(predictives, df) {
d <- cbind(predictives,df)
d <- d[, !duplicated(colnames(d))] %>%
gather("type", "value", predictedMention, observedMention) %>%
group_by(language,type,kind) %>%
summarize(mean = mean(value))
ggplot()
ggplot(d, aes(x = type, y = mean, fill = language)) +
facet_wrap(~kind) +
geom_bar(stat="identity", position = "position_dodge") +
theme_bw() # +
# annotate("text", x = 0.75, y = 0, label = sprintf("r = %f", cor(d$observedMention,d$predictedMention)))
}
graphPredictives(vanillaPredictives, DF)
graphPredictives <- function(predictives, df) {
d <- cbind(predictives,df)
d <- d[, !duplicated(colnames(d))] %>%
gather("type", "value", predictedMention, observedMention) %>%
group_by(language,type,kind) %>%
summarize(mean = mean(value))
ggplot()
ggplot(d, aes(x = type, y = mean, fill = language)) +
facet_wrap(~kind) +
geom_bar(stat="identity", position = "dodge") +
theme_bw() # +
# annotate("text", x = 0.75, y = 0, label = sprintf("r = %f", cor(d$observedMention,d$predictedMention)))
}
graphPredictives(vanillaPredictives, DF)
View(vanillaPredictives)
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
graphPosteriors(vanillaPosteriors) + ggtitle("Vanilla posteriors")
ggsave("results/WuGibson/vanillaPosteriors.png")
vanillaEstimates <- getEstimates(vanillaPosteriors)
vanillaPredictionScript <- wrapPrediction(model, vanillaEstimates,
"vanilla")
vanillaPredictives <- webppl(vanillaPredictionScript, data = DF, data_var = "df")
graphPredictives(vanillaPredictives, DF)
ggsave("results/wuGibson/vanillaPredictives_color.png", width = 4, height = 3, units = "in")
continuousPosteriors_colorDF <- webppl(continuousInferenceScript, data = colorDF, data_var = "df")
continuousPosteriors <- webppl(continuousInferenceScript, data = DF, data_var = "df")
graphPosteriors(continuousPosteriors) + ggtitle("Continuous posteriors")
ggsave("results/WuGibson/continuousPosteriors_color.png")
continuousEstimates_colorDF <- getEstimates(continuousPosteriors_colorDF)
continuousPredictionScript_colorDF <- wrapPrediction(model, continuousEstimates_colorDF,
"continuous")
continuousPredictives_colorDF <- webppl(continuousPredictionScript_colorDF, data = colorDF, data_var = "df")
continuousEstimates <- getEstimates(continuousPosteriors)
continuousPredictionScript <- wrapPrediction(model, continuousEstimates,
"continuous")
continuousPredictives <- webppl(continuousPredictionScript, data = DF, data_var = "df")
graphPredictives(continuousPredictives_colorDF, colorDF)
graphPredictives(continuousPredictives, colorDF)
graphPredictives(continuousPredictives, DF)
continuousPosteriors <- webppl(continuousInferenceScript, data = DF, data_var = "df")
graphPosteriors(continuousPosteriors) + ggtitle("Continuous posteriors")
ggsave("results/WuGibson/continuousPosteriors_color.png")
continuousEstimates <- getEstimates(continuousPosteriors)
continuousPredictionScript <- wrapPrediction(model, continuousEstimates,
"continuous")
continuousPredictives <- webppl(continuousPredictionScript, data = DF, data_var = "df")
graphPredictives(continuousPredictives, DF)
ggsave("results/wuGibson/continuousPredictives_color.png", width = 4, height = 3, units = "in")
incrementalPosteriors_colorDF <- webppl(incrementalInferenceScript, data = colorDF, data_var = "df")
graphPosteriors(incrementalPosteriors_colorDF) + ggtitle("Incremental posteriors")
ggsave("results/WuGibson/incrementalPosteriors_color.png")
ggsave("results/WuGibson/incrementalPosteriors.png")
incrementalEstimates_colorDF <- getEstimates(incrementalPosteriors_colorDF)
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPosteriors <- incrementalPosteriors_colorDF
graphPosteriors(incrementalPosteriors_colorDF) + ggtitle("Incremental posteriors")
graphPosteriors(incrementalPosteriors) + ggtitle("Incremental posteriors")
ggsave("results/WuGibson/incrementalPosteriors.png")
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPredictionScript_colorDF <- wrapPrediction(model, incrementalEstimates_colorDF,
"incremental")
incrementalPredictionScript <- wrapPrediction(model, incrementalEstimates,
"incremental")
incrementalPredictives <- webppl(incrementalPredictionScript, data = colorDF, data_var = "df")
graphPredictives(incrementalPredictives_colorDF, colorDF)
graphPredictives(incrementalPredictives, DF)
graphPredictives(incrementalPredictives, DF)
graphPredictives(incrementalPredictives, DF)
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPredictionScript <- wrapPrediction(model, incrementalEstimates,
"incremental")
incrementalPredictives <- webppl(incrementalPredictionScript, data = colorDF, data_var = "df")
incrementalPredictives <- webppl(incrementalPredictionScript, data = DF, data_var = "df")
graphPredictives(incrementalPredictives, DF)
ggsave("results/wuGibson/incrementalPredictives_color.png", width = 4, height = 3, units = "in")
incrementalContinuousPosteriors_colorDF <- webppl(incrementalContinuousInferenceScript, data = colorDF, data_var = "df")
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
incrementalContinuousPosteriors <- webppl(incrementalContinuousInferenceScript, data = DF, data_var = "df")
graphPosteriors(incrementalContinuousPosteriors) + ggtitle("Continuous-incremental posteriors")
ggsave("results/WuGibson/incrementalContinuousPosteriors.png")
incrementalContinuousEstimates_colorDF <- getEstimates(incrementalContinuousPosteriors_colorDF)
incrementalContinuousEstimates <- getEstimates(incrementalContinuousPosteriors)
incrementalContinuousPredictionScript <- wrapPrediction(model, incrementalContinuousEstimates,
"incremental")
incrementalContinuousPredictives <- webppl(incrementalContinuousPredictionScript, data = colorDF, data_var = "df")
incrementalContinuousPredictives <- webppl(incrementalContinuousPredictionScript, data = DF, data_var = "df")
graphPredictives(incrementalContinuousPredictives_colorDF, colorDF)
graphPredictives(incrementalContinuousPredictives, DF)
ggsave("results/wuGibson/incrementalContinuousPredictives.png", width = 4, height = 3, units = "in")
incrementalContinuousPredictionScript <- wrapPrediction(model, incrementalContinuousEstimates,
"incremental")
incrementalContinuousPredictives <- webppl(incrementalContinuousPredictionScript, data = DF, data_var = "df")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("helpers/dataPrep.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("helpers/dataPrep.R")
source("helpers/wpplHelpers_wu.R")
source("helpers/vizhelpers_wu.R")
source("helpers/wpplHelpers_wu.R")
source("helpers/vizhelpers_wu.R")
number_eng <- read_csv("studies/WuGibson/data_number_eng_CODED_anon.csv")
color_eng <- read_csv("studies/WuGibson/data_color_eng_CODED_anon.csv")
number_sp <- read_csv("studies/WuGibson/data_number_spa_CODED_anon.csv")
color_sp <- read_csv("studies/WuGibson/data_color_spa_CODED_anon.csv")
number_uncollapsed <- rbind(number_eng,number_sp) %>%
rename(language = lang, condition = figure) %>%
mutate(language = recode(language, eng = "english", spa = "spanish"))
color_uncollapsed <- rbind(color_eng,color_sp) %>%
rename(language = lang, condition = figure) %>%
mutate(language = recode(language, eng = "english", spa = "spanish"))
key_color <- read_csv("studies/WuGibson/key_color.csv") %>%
rename(condition = number)
key_number <- read_csv("studies/WuGibson/key_number.csv") %>%
rename(condition = number)
getStates = function(condRow) {
return(unlist(c(condRow$stimuli1,condRow$stimuli2,condRow$stimuli3,condRow$stimuli4)))
}
getUtterances = function(states, language) {
utterances = c()
for(state in states) {
words <- str_split(state, "-")[[1]]
number <- words[1]
color <- words[2]
noun <- words[3]
utterances = append(utterances,noun)
if(language == "spanish") {
complex_noun = paste(number, noun, color, sep = " ")
utterances = append(utterances, complex_noun)
noun_color = paste(noun, color, sep = " ")
utterances = append(utterances, noun_color)
number_noun = paste(number, noun, sep = " ")
utterances = append(utterances, number_noun)
} else if (language == "english") {
complex_noun = paste(number, color, noun, sep = " ")
utterances = append(utterances, complex_noun)
color_noun = paste(color, noun, sep = " ")
utterances = append(utterances, color_noun)
number_noun = paste(number, noun, sep = " ")
utterances = append(utterances, number_noun)
}
}
# print(utterances)
utterances <- lapply(unique(utterances), function(utterance) {
utterance <- paste("START", utterance, sep = " ")
utterance <- paste(utterance, "STOP", sep = " ")
return(utterance)
})
return(unlist(utterances))
}
makeStatesUtterances = function(key, language) {
states <- c()
utterances <- c()
for (i in seq(nrow(key))) {
states <- append(states, list(getStates(key[i,])))
utterances <- append(utterances, list(getUtterances(getStates(key[i,]),language)))
}
key$states <- states
key$utterances <- utterances
return(key) %>%
mutate(language = language) %>%
select(condition, states, utterances, target, language)
}
collapse_dataset <- function(d_uncollapsed) {
d_uncollapsed %>%
group_by(condition,language) %>%
mutate(n = n()) %>%
mutate(observedMention = sum(use)/n) %>%
select(condition, language, observedMention) %>%
distinct(condition, .keep_all = TRUE)
}
numberStatesUtterancesEnglish <- makeStatesUtterances(key_number,"english")
numberStatesUtterancesSpanish <- makeStatesUtterances(key_number,"spanish")
numberStatesUtterances <- rbind(numberStatesUtterancesEnglish, numberStatesUtterancesSpanish)
numberStatesUtterances$overmod_1 <- ""
numberStatesUtterances$overmod_2 <- ""
for(i in seq(nrow(numberStatesUtterances))) {
language = numberStatesUtterances[i,]$language
target_features <- str_split(numberStatesUtterances[i,]$target, "-")[[1]]
if(language == "english") {
numberStatesUtterances[i,]$overmod_1 <- sprintf("START %s %s %s STOP",
target_features[1],
target_features[2],
target_features[3])
numberStatesUtterances[i,]$overmod_2 <- sprintf("START %s %s STOP",
target_features[1],
target_features[3])
} else if (language == "spanish") {
numberStatesUtterances[i,]$overmod_1 <- sprintf("START %s %s %s STOP",
target_features[1],
target_features[3],
target_features[2]
)
numberStatesUtterances[i,]$overmod_2 <- sprintf("START %s %s STOP",
target_features[1],
target_features[3])
}
}
numberCollapsed <- collapse_dataset(number_uncollapsed)
numberDF <- cbind(numberStatesUtterances, numberCollapsed)
colorStatesUtterances <- rbind(makeStatesUtterances(key_color,"english"),
makeStatesUtterances(key_color,"spanish"))
colorStatesUtterances$overmod_1 <- ""
colorStatesUtterances$overmod_2 <- ""
for(i in seq(nrow(colorStatesUtterances))) {
language = colorStatesUtterances[i,]$language
target_features <- str_split(colorStatesUtterances[i,]$target, "-")[[1]]
if(language == "english") {
colorStatesUtterances[i,]$overmod_1 <- sprintf("START %s %s %s STOP",
target_features[1],
target_features[2],
target_features[3])
colorStatesUtterances[i,]$overmod_2 <- sprintf("START %s %s STOP",
target_features[2],
target_features[3])
} else if (language == "spanish") {
colorStatesUtterances[i,]$overmod_1 <- sprintf("START %s %s %s STOP",
target_features[1],
target_features[3],
target_features[2]
)
colorStatesUtterances[i,]$overmod_2 <- sprintf("START %s %s STOP",
target_features[3],
target_features[2])
}
}
colorCollapsed <- collapse_dataset(color_uncollapsed)
colorDF <- cbind(colorStatesUtterances,colorCollapsed)
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
colorDF$kind <- "color"
numberDF$kind <- "number"
DF <- rbind(colorDF,numberDF)
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
colorDF$kind <- "color"
numberDF$kind <- "number"
DF <- rbind(colorDF,numberDF)
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
vanillaInferenceScript
write_file(vanillaInferenceScript,"vis.txt")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
colorDF$kind <- "color"
numberDF$kind <- "number"
DF <- rbind(colorDF,numberDF)
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
write_file(vanillaInferenceScript,"vis.txt")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
colorDF$kind <- "color"
numberDF$kind <- "number"
DF <- rbind(colorDF,numberDF)
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
write_file(vanillaInferenceScript,"vis.txt")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
graphPosteriors(vanillaPosteriors) + ggtitle("Vanilla posteriors")
ggsave("results/WuGibson/vanillaPosteriors.png")
vanillaEstimates <- getEstimates(vanillaPosteriors)
vanillaPredictionScript <- wrapPrediction(model, vanillaEstimates,
"vanilla")
vanillaPredictives <- webppl(vanillaPredictionScript, data = DF, data_var = "df")
graphPredictives(vanillaPredictives, DF)
ggsave("results/wuGibson/vanillaPredictives.png", width = 4, height = 3, units = "in")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
colorDF$kind <- "color"
numberDF$kind <- "number"
DF <- rbind(colorDF,numberDF)
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
graphPosteriors(vanillaPosteriors) + ggtitle("Vanilla posteriors")
ggsave("results/WuGibson/vanillaPosteriors.png")
vanillaEstimates <- getEstimates(vanillaPosteriors)
vanillaPredictionScript <- wrapPrediction(model, vanillaEstimates,
"vanilla")
vanillaPredictives <- webppl(vanillaPredictionScript, data = DF, data_var = "df")
graphPredictives(vanillaPredictives, DF)
ggsave("results/wuGibson/vanillaPredictives.png", width = 4, height = 3, units = "in")
continuousPosteriors <- webppl(continuousInferenceScript, data = DF, data_var = "df")
graphPosteriors(continuousPosteriors) + ggtitle("Continuous posteriors")
ggsave("results/WuGibson/continuousPosteriors_color.png")
continuousEstimates <- getEstimates(continuousPosteriors)
continuousPredictionScript <- wrapPrediction(model, continuousEstimates,
"continuous")
continuousPredictives <- webppl(continuousPredictionScript, data = DF, data_var = "df")
graphPredictives(continuousPredictives, DF)
ggsave("results/wuGibson/continuousPredictives_color.png", width = 4, height = 3, units = "in")
incrementalPosteriors <- webppl(incrementalInferenceScript, data = colorDF, data_var = "df")
graphPosteriors(incrementalPosteriors) + ggtitle("Incremental posteriors")
ggsave("results/WuGibson/incrementalPosteriors.png")
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPredictionScript <- wrapPrediction(model, incrementalEstimates,
"incremental")
incrementalPredictives <- webppl(incrementalPredictionScript, data = DF, data_var = "df")
graphPredictives(incrementalPredictives, DF)
ggsave("results/wuGibson/incrementalPredictives_color.png", width = 4, height = 3, units = "in")
incrementalContinuousPosteriors <- webppl(incrementalContinuousInferenceScript, data = DF, data_var = "df")
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
model <- paste(read_file("studies/WuGibson/modelAndSemantics.txt"),
read_file("../_shared/engine.txt"), sep = "\n")
colorDF$kind <- "color"
numberDF$kind <- "number"
DF <- rbind(colorDF,numberDF)
vanillaInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/vanilla.txt"),
sep = "\n")
continuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/continuous.txt"),
sep = "\n")
incrementalInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incremental.txt"),
sep = "\n")
incrementalContinuousInferenceScript <- paste(model, read_file("inferenceCommands/WuGibson/incrementalContinuous.txt"),
sep = "\n")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = DF, data_var = "df")
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPosteriors <- webppl(incrementalInferenceScript, data = colorDF, data_var = "df")
View(DF)
View(DF %>% select(target, observedMention, kind)
)
)
View(DF %>% select(target, observedMention, kind, language))
View(DF %>% select(target, observedMention, kind, language))
View(DF %>% select(target, observedMention, kind, language))
View(DF %>% select(target, observedMention, kind, language))
View(DF %>% select(target, observedMention, kind, language)
()
()
)
View(DF %>% select(target, observedMention, kind, language)
)
View(color_sp)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("helpers/dataPrep.R")
source("helpers/dataPrep_degen.R")
source("helpers/wpplHelpers_degen.R")
source("helpers/vizhelpers_degen.R")
d_uncollapsed <- read_csv("studies/Degenetal/data.csv")
View(d_uncollapsed)
statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("studies/Degenetal/modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
source("helpers/dataPrep_degen.R")
source("helpers/dataPrep_degen.R")
source("helpers/wpplHelpers_degen.R")
source("helpers/vizhelpers_degen.R")
d_uncollapsed <- read_csv("studies/Degenetal/data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("studies/Degenetal/modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = df, data_var = "df")
source("helpers/dataPrep_degen.R")
source("helpers/wpplHelpers_degen.R")
source("helpers/vizhelpers_degen.R")
model <- makeModel("studies/Degenetal/modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = df, data_var = "df")
source("helpers/dataPrep_degen.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("helpers/dataPrep_degen.R")
source("helpers/wpplHelpers_degen.R")
source("helpers/vizhelpers_degen.R")
d_uncollapsed <- read_csv("studies/Degenetal/data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("studies/Degenetal/modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = df, data_var = "df")
View(d_uncollapsed)
View(d_uncollapsed)
View(d)
View(d_uncollapsed)
View(d_uncollapsed)
View(d_uncollapsed)
