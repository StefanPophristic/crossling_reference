getChat(15)
getRoundData(15)
getChat(15)
getChat(16)
getRoundData(16)
getChat(17)
getRoundData(17)
getChat(18)
getRoundData(18)
getChat(19)
getRoundData(19)
getChat(20)
getRoundData(20)
getChat(21)
getRoundData(21)
getChat(22)
getRoundData(22)
getChat(23)
getRoundData(23)
getChat(24)
getRoundData(24)
getChat(25)
getRoundData(25)
getChat(26)
getRoundData(26)
getChat(27)
getRoundData(27)
getChat(31)
getRoundData(31)
getChat(32)
getRoundData(32)
getChat(33)
getRoundData(33)
getChat(34)
getRoundData(34)
getChat(35)
getRoundData(35)
getChat(36)
getRoundData(36)
getChat(40)
getRoundData(40)
getChat(41)
42
getChat(42)
getRoundData(42)
getChat(45)
getRoundData(45)
getChat(48)
getRoundData(48)
getChat(52)
getRoundData(52)
getChat(56)
getRoundData(56)
getChat(60)
getRoundData(60)
index = 1
petGraphs = list()
for(object in c("snake", "scorpion", "pollen",
"pitbull", "hairlesscat", "greatdane",
"goldfish", "gascan", "chinchilla",
"chihuahua", "boombox", "backpack")) {
petGraphs[[index]] <- graphFunc(d, "pets", object)
index = index + 1
}
do.call("grid.arrange", c(petGraphs, nrow = 3))
do.call("grid.arrange", c(vehicleGraphs, nrow = 3))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../_shared/wpplHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/EnglishPilot/bda_data.csv") %>%
rename(response = redBDAUtterance)
statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = df, data_var = "df")
graphPosteriors(vanillaPosteriors) + ggtitle("Vanilla posteriors")
View(vanillaPosteriors)
View(vanillaPosteriors)
View(vanillaInferenceScript)
View(vanillaPosteriors)
rm(list = ls())
```{r import, include=FALSE}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(mongolite)
library(tidyverse)
library(tidyverse)
library(jsonlite)
theme_set(theme_bw())
## for bootstrapping 95% confidence intervals
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
prolific_summary <- read_csv("../../data/EnglishPilot/identifyingInfo/prolific_export_60afcf977007299c487304c6.csv") %>%
filter(started_datetime > "2021-06-02 00:00:00")
rm(prolific_summary)
uname_pwd <- readLines("../../data/EnglishPilot/identifyingInfo/upwd")
uname_pwd <- readLines("../../data/BCS/identifyingInfo/upwd")
uname_pwd <- readLines("../../data/BCS/identifyingInfo/upwd")
uname_pwd <- readLines("../../data/BCSPilot/identifyingInfo/upwd")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(mongolite)
library(tidyverse)
library(jsonlite)
theme_set(theme_bw())
## for bootstrapping 95% confidence intervals
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
uname_pwd <- readLines("../../data/BCSPilot/identifyingInfo/upwd")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(mongolite)
library(tidyverse)
library(jsonlite)
theme_set(theme_bw())
## for bootstrapping 95% confidence intervals
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
load("../_shared/regressionHelpers.R")
myCenter <- function(x) {
if (is.numeric(x)) { return(x - mean(x)) }
if (is.factor(x)) {
x <- as.numeric(x)
return(x - mean(x))
}
if (is.data.frame(x) || is.matrix(x)) {
m <- matrix(nrow=nrow(x), ncol=ncol(x))
colnames(m) <- paste("c", colnames(x), sep="")
for (i in 1:ncol(x)) {
if (is.factor(x[,i])) {
y <- as.numeric(x[,i])
m[,i] <- y - mean(y, na.rm=T)
}
if (is.numeric(x[,i])) {
m[,i] <- x[,i] - mean(x[,i], na.rm=T)
}
}
return(as.data.frame(m))
}
}
## for bootstrapping 95% confidence intervals
library(bootstrap)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
open("../_shared/regressionHelpers.R")
source("../_shared/regressionHelpers.R")
uname_pwd <- readLines("../../data/BCSPilot/identifyingInfo/upwd")
con <- mongo("rounds", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
con$aggregate
con <- mongo("rounds", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
sprintf('[{ $match: { id: {$in: %s } } }]', toJSON("1,2,3"))
sprintf('[{ $match: { id: {$in: %s } } }]', toJSON("1","2","3"))
sprintf('[{ $match: { id: {$in: %s } } }]', toJSON(c("1","2","3")))
uname_pwd <- readLines("../../data/BCSPilot/identifyingInfo/upwd")
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$aggregate(sprintf('[{ $match: { id: {$in: } } }]', toJSON("testName1","testName2")))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$aggregate(sprintf('[{ $match: { id: { $in: } } }]', toJSON("testName1","testName2")))) %>%
select(id, gameId)
sprintf('[{ $match: { id: { $in: } } }]', toJSON("testName1","testName2"))
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$aggregate(sprintf('[{ $match: { id: { $in: } } }]', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$aggregate(sprintf('[{ $match: { id: { $in: } } }]', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$aggregate(sprintf('[{ $match: { id: { $in: %s } } }]', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$find(sprintf('[{ id: { $in: %s } } }]', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
players <- data.frame(con$find(sprintf('{ id: { $in: %s } } }', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$find(sprintf('{ id: { $in: %s } } }', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
players <- data.frame(con$find(sprintf('{ "id": { $in: %s } } }', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
toJSON(sprintf('{ "id": { $in: %s } } }', toJSON(c("testName1","testName2")))
)
players <- data.frame(con$find(sprintf('{ "id": { $in: %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
fromJSON('{ "id": { $in: ["testName1","testName2"] } } ')
players <- data.frame(con$find(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$find(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
players <- data.frame(con$aggregate(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
players <- data.frame(con$find(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
players <- data.frame(con$find(sprintf('{ "gameid": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
players <- data.frame(con$find(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$find(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con <- mongo("players", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
players <- data.frame(con$find(sprintf('{ "id": { "$in": %s } } ', toJSON(c("testName1","testName2"))))) %>%
select(id, gameId)
con$disconnect()
rm(con)
con <- mongo("rounds", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
d <- data.frame(con$aggregate(sprintf('[{ $match: { gameId: {$in: } } }]', toJSON(players$gameId)))) %>%
mutate(index = row_number())
d <- data.frame(con$aggregate(sprintf('{ "gameId": { "$in": %s } } ', toJSON(players$gameId)))) %>%
mutate(index = row_number())
d <- data.frame(con$find(sprintf('{ "gameId": { "$in": %s } } ', toJSON(players$gameId)))) %>%
mutate(index = row_number())
View(d)
con$disconnect()
rm(con)
rawD <- d
con <- mongo("player_inputs", url = sprintf("mongodb+srv://%s@cluster0.xizoq.mongodb.net/crossling-ref", uname_pwd))
player_info <- data.frame(con$find(sprintf('{ "gameId": { "$in": %s } } ', toJSON(players$gameId)))) %>%
filter(gameId %in% d$gameId)
con$disconnect()
rm(con)
d <- cbind(d$gameId, d$X_id, d$data)
View(d)
excludeBCS <- c()
d <- d %>%
filter(!(gameId %in% excludeBCS))
d <- d %>%
group_by(group = cumsum(gameId != lag(gameId, default = first(gameId)))) %>%
mutate(roundNumber = row_number()) %>%
ungroup() %>%
select(-group)
directorFirstMessage <- c()
directorAllMessages <- c()
guesserAllMessages <- c()
nameClickedObj <- c()
d <- d %>%
filter(!(chatLog == "NULL"))
View(d[[15]][[1]])
View(data$chat[1])
View(data$chat[[1]])
View(data$chat)
View(d$data$chat)
d$data
d$X_id
d <- cbind(d$gameId, d$data)
colnames(d)[1] <- "gameId"
View(d[[13]][[1]])
d$chat
view(d$chat)
View(d$chat)
d <- d %>%
group_by(group = cumsum(gameId != lag(gameId, default = first(gameId)))) %>%
mutate(roundNumber = row_number()) %>%
ungroup() %>%
select(-group)
directorFirstMessage <- c()
directorAllMessages <- c()
guesserAllMessages <- c()
nameClickedObj <- c()
d <- d %>%
filter(!(chat == "NULL"))
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]]
chat_temp <- cbind(chat_temp$text, chat_temp$player)
colnames(chat_temp)[1] <- "text"
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(name == "Guesser")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(name == "Director")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
d1i,]$chat[[1]]
d[1,]$chat[[1]]
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]]
chat_temp <- cbind(chat_temp$text, chat_temp$player)
colnames(chat_temp)[1] <- "text"
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]]
chat_temp <- cbind(chat_temp$text, chat_temp$player)
colnames(chat_temp)[1] <- "text"
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]]
chat_temp <- cbind(chat_temp$text, chat_temp$player)
colnames(chat_temp)[1] <- "text"
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
i <-1
chat_temp <- d[i,]$chat[[1]]
chat_temp <- cbind(chat_temp$text, chat_temp$player)
colnames(chat_temp)[1] <- "text"
View(chat_temp)
colnames(chat_temp)
chat_temp <- d[i,]$chat[[1]]
chat_temp <- data.frame(cbind(chat_temp$text, chat_temp$player))
colnames(chat_temp)[1] <- "text"
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
chat_temp <- d[i,]$chat[[1]]
View(chat_temp)
chat_temp <- d[i,]$chat[[1]]
chat_temp <- data.frame(cbind(chat_temp$text, chat_temp$role))
colnames(chat_temp)[1] <- "text"
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
View(chat_temp)
chat_temp <- d[i,]$chat[[1]] %>% select(text,role)
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]] %>% select(text,role)
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]] %>% select(text,role)
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
rm(chat_temp, guesserChat, directorChat, i, sel, images)
directorFirstMessage <- c()
directorAllMessages <- c()
guesserAllMessages <- c()
nameClickedObj <- c()
d <- d %>%
filter(!(chat == "NULL"))
for(i in seq(nrow(d))) {
chat_temp <- d[i,]$chat[[1]] %>% select(text,role)
chat_temp$text <- as.character(chat_temp$text)
guesserChat <- chat_temp %>% filter(role == "listener")
guesserAllMessages[i] <- paste(guesserChat$text, collapse = "__")
directorChat <- chat_temp %>% filter(role == "speaker")
directorAllMessages[i] <- paste(directorChat$text, collapse = "__")
if(nrow(directorChat) == 1) {
directorFirstMessage[i] <- directorAllMessages[i]
} else {
directorFirstMessage[i] <- strsplit(directorAllMessages[i], split = "__", fixed = TRUE)[[1]][1]
}
# Return the item that the listener selected
sel <- d[i,]$listenerSelection
images<- data.frame(d[i,]$images)
if(is.na(sel) || sel == "NONE") {
nameClickedObj[i] <- sel
} else {
nameClickedObj[i] <- (images %>% filter(id == sel))$name
}
}
rm(chat_temp, guesserChat, directorChat, i, sel, images)
d <- cbind(d, directorAllMessages, directorFirstMessage, guesserAllMessages, nameClickedObj)
View(d)
rm(directorAllMessages, directorFirstMessage, guesserAllMessages, nameClickedObj)
d <- d %>%
mutate(correct = ifelse(d$target$id == listenerSelection, 1, 0))
###Exclusions:
sprintf('Number of games excluded due to native lang: %d', length(excludeEnglish))
###Exclusions:
sprintf('Number of games excluded due to native lang: %d', length(excludeBCS))
sprintf('Number of games after exclusions: %d', length(unique(d$gameId)) - length(excludeBCS))
roundsPerGame <- d %>% group_by(gameId) %>% summarise(n = n())
sprintf('Avg. of rounds per game (should be exactly 72): %f', mean(roundsPerGame$n))
print("Rounds per game:")
roundsPerGame
excludeIncomplete <- (roundsPerGame %>% filter(n < 72))$gameId
# we can exclude incomplete games if we want... but Degen et al. 2020 do not.
d <- d %>%
# filter(!(gameId %in% excludeIncomplete))
filter()
sprintf('Incomplete games: %d', length(excludeIncomplete))
###Data transformation:
head(d %>% mutate(targetName = d$target$name) %>%
select(condition, targetName, directorFirstMessage, nameClickedObj))
###Data transformation:
head(d %>% mutate(targetName = d$target$name) %>%
select(condition, targetName, directorFirstMessage, nameClickedObj))
View(d)
View(d[[13]][[1]])
