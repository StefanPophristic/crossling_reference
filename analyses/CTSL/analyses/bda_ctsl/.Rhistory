setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
english_statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
english_df <- merge(d, english_statesUtterances, by = "condition")
VIew(df)
View(df)
View(df$utterances)
df$utterances
english_df$utterances
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
english_statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
statesUtterances
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
statesUtterances
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
english_df <- merge(d, english_statesUtterances, by = "condition")
View(df)
df$states
df$utterances
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
english_statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
incrementalInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"incremental")
incrementalPosteriors <- webppl(incrementalInferenceScript, data = df, data_var = "df")
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
incrementalInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"incremental")
incrementalPosteriors <- webppl(incrementalInferenceScript, data = df, data_var = "df")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
incrementalInferenceScript <- wrapInference(model, "START color size STOP",
"color_size",
"incremental")
incrementalPosteriors <- webppl(incrementalInferenceScript, data = df, data_var = "df")
graphPosteriors(incrementalPosteriors) + ggtitle("Incremental posteriors")
ggsave("results/ctsl_incrementalPosteriors_spanish_correct.png")
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPredictives <- webppl(incrementalPredictionScript, data = df, data_var = "df")
graphPredictives(incrementalPredictives, df) + ggtitle("Incremental predictives")
incrementalPredictionScript <- wrapPrediction(model, incrementalEstimates,
"START color size STOP",
"color_size",
"incremental")
incrementalPredictives <- webppl(incrementalPredictionScript, data = df, data_var = "df")
graphPredictives(incrementalPredictives, df) + ggtitle("Incremental predictives")
ggsave("results/ctsl_incrementalPredictives_spanish_correct.png", width = 4, height = 3, units = "in")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../../_shared/inferenceHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
incrementalContinuousInferenceScript <- wrapInference(model,
"STARTcolor size STOP",
"color_size",
"incrementalContinuous")
incrementalContinuousPosteriors <- webppl(incrementalContinuousInferenceScript, data = df, data_var = "df")
incrementalContinuousInferenceScript <- wrapInference(model,
"START color size STOP",
"color_size",
"incrementalContinuous")
incrementalContinuousPosteriors <- webppl(incrementalContinuousInferenceScript, data = df, data_var = "df")
d_uncollapsed <- read_csv("../../data/bda_data.csv")
statesUtterances <- makeStatesUtterances(d_uncollapsed, "spanish")
d <- collapse_dataset(d_uncollapsed)
df <- merge(d, statesUtterances, by = "condition")
model <- makeModel("modelAndSemantics.txt")
incrementalContinuousInferenceScript <- wrapInference(model,
"START color size STOP",
"color_size",
"incrementalContinuous")
incrementalContinuousPosteriors <- webppl(incrementalContinuousInferenceScript, data = df, data_var = "df")
graphPosteriors(incrementalContinuousPosteriors) + ggtitle("Incremental-continuous posteriors")
ggsave("results/ctsl_incrementalContinuousPosteriors.png")
incrementalContinuousEstimates <- getEstimates(incrementalContinuousPosteriors)
incrementalContinuousPredictionScript <- wrapPrediction(model,
incrementalContinuousEstimates,
"START color size STOP",
"color_size",
"incrementalContinuous")
incrementalContinuousPredictives <- webppl(incrementalContinuousPredictionScript, data = df, data_var = "df")
ggsave("results/ctsl_incrementalContinuousPredictives.png", width = 4, height = 3, units = "in")
graphPredictives(incrementalContinuousPredictives, df)
ggsave("results/ctsl_incrementalContinuousPredictives.png", width = 4, height = 3, units = "in")
incrementalInferenceScript <- wrapInference(model, "START color size STOP",
"color_size",
"incremental")
incrementalPosteriors <- webppl(incrementalInferenceScript, data = df, data_var = "df")
View(incrementalEstimates)
graphPosteriors(incrementalPosteriors) + ggtitle("Incremental posteriors")
ggsave("results/ctsl_incrementalPosteriors.png")
incrementalEstimates <- getEstimates(incrementalPosteriors)
incrementalPredictionScript <- wrapPrediction(model, incrementalEstimates,
"START color size STOP",
"color_size",
"incremental")
incrementalPredictives <- webppl(incrementalPredictionScript, data = df, data_var = "df")
graphPredictives(incrementalPredictives, df) + ggtitle("Incremental predictives")
ggsave("results/ctsl_incrementalPredictives.png", width = 4, height = 3, units = "in")
continuousInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"continuous")
continuousPosteriors <- webppl(continuousInferenceScript, data = df, data_var = "df")
graphPosteriors(continuousPosteriors) + ggtitle("Continuous posteriors")
ggsave("results/ctsl_continuousPosteriors.png")
continuousEstimates <- getEstimates(continuousPosteriors)
continuousPredictionScript <- wrapPrediction(model, continuousEstimates,
"START size color STOP",
"color_size",
"continuous")
continuousPredictives <- webppl(continuousPredictionScript, data = df, data_var = "df")
graphPredictives(continuousPredictives, df) + ggtitle("Continuous predictives")
continuousInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"continuous")
continuousPosteriors <- webppl(continuousInferenceScript, data = df, data_var = "df")
graphPosteriors(continuousPosteriors) + ggtitle("Continuous posteriors")
ggsave("results/ctsl_continuousPosteriors.png")
continuousEstimates <- getEstimates(continuousPosteriors)
continuousPredictionScript <- wrapPrediction(model, continuousEstimates,
"START size color STOP",
"color_size",
"continuous")
continuousPredictives <- webppl(continuousPredictionScript, data = df, data_var = "df")
graphPredictives(continuousPredictives, df) + ggtitle("Continuous predictives")
continuousInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"continuous")
continuousPosteriors <- webppl(continuousInferenceScript, data = df, data_var = "df")
graphPosteriors(continuousPosteriors) + ggtitle("Continuous posteriors")
ggsave("results/ctsl_continuousPosteriors.png")
continuousEstimates <- getEstimates(continuousPosteriors)
continuousPredictionScript <- wrapPrediction(model, continuousEstimates,
"START size color STOP",
"color_size",
"continuous")
continuousPredictives <- webppl(continuousPredictionScript, data = df, data_var = "df")
graphPredictives(continuousPredictives, df) + ggtitle("Continuous predictives")
ggsave("results/ctsl_continuousPredictives.png", width = 4, height = 3, units = "in")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
vanillaPosteriors <- webppl(vanillaInferenceScript, data = df, data_var = "df")
graphPosteriors(vanillaPosteriors) + ggtitle("Vanilla posteriors")
ggsave("results/ctsl_vanillaPosteriors.png")
vanillaEstimates <- getEstimates(vanillaPosteriors)
vanillaPredictionScript <- wrapPrediction(model, vanillaEstimates,
"START size color STOP",
"color_size",
"vanilla")
vanillaPredictives <- webppl(vanillaPredictionScript, data = df, data_var = "df")
graphPredictives(vanillaPredictives, df)
ggsave("results/ctsl_vanillaPredictives.png", width = 4, height = 3, units = "in")
View(vanillaEstimates)
View(continuousEstimates)
View(incrementalEstimates)
View(incrementalContinuousEstimates)
save.image("results/ctsl_results.RData")
