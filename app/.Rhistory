# color for the poster
scale_fill_manual(c("#4287f5","#fff200"))
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
legend <- plot_grid(get_legend(standardGraph + theme(legend.position = "bottom")))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA") +
# color for the poster
scale_fill_manual(c("#4287f5","#fff200"))
base = 6
expand = 3
graph <- function(probArray) {
toGraph <- data.frame(matrix(NA, nrow = 4, ncol = 3))
colnames(toGraph) <- c("language", "behavior", "probability")
toGraph$language <- c("English", "English", "Spanish-postnom.", "Spanish-postnom.")
toGraph$behavior <- c("Redundant color adjective (SS)", "Redundant size adjective (CS)",
"Redundant color adjective (SS)", "Redundant size adjective (CS)")
toGraph$probability <- probArray
p <- ggplot(toGraph, aes(x=language, y=probability, fill = behavior)) +
theme_bw() +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
ylab(element_blank()) +
xlab(element_blank()) +
geom_bar(stat="identity",position = "dodge") +
# scale_fill_viridis(discrete = TRUE) +
# color for the poster
scale_fill_manual(c("#4287f5","#fff200")) +
# for hypothetical graphs
theme(legend.title = element_blank(), legend.position="none", # axis.text.x = element_blank(),
axis.text.x = element_text(angle = 20, hjust=1),
)
return(p)
}
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START small blue pin STOP"))'
cmd_sp_postnom_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START pin blue small STOP"))'
cmd_eng_inc <- cmd_eng
cmd_sp_postnom_inc <- cmd_sp_postnom
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
standardGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Standard RSA")
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
crsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
incGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Incremental RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA")
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
base = 6
expand = 3
graph <- function(probArray) {
toGraph <- data.frame(matrix(NA, nrow = 4, ncol = 3))
colnames(toGraph) <- c("language", "behavior", "probability")
toGraph$language <- c("English", "English", "Spanish-postnom.", "Spanish-postnom.")
toGraph$behavior <- c("Redundant color adjective (SS)", "Redundant size adjective (CS)",
"Redundant color adjective (SS)", "Redundant size adjective (CS)")
toGraph$probability <- probArray
p <- ggplot(toGraph, aes(x=language, y=probability, fill = behavior)) +
theme_bw() +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
ylab(element_blank()) +
xlab(element_blank()) +
geom_bar(stat="identity",position = "dodge") +
# scale_fill_viridis(discrete = TRUE) +
# color for the poster
scale_fill_manual(c("#4287f5","#fff200")) +
# for hypothetical graphs
theme(legend.title = element_blank(), legend.position="none", # axis.text.x = element_blank(),
axis.text.x = element_text(angle = 20, hjust=1),
)
return(p)
}
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START small blue pin STOP"))'
cmd_sp_postnom_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START pin blue small STOP"))'
cmd_eng_inc <- cmd_eng
cmd_sp_postnom_inc <- cmd_sp_postnom
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
standardGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Standard RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
incGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Incremental RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA")
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
graph <- function(probArray) {
toGraph <- data.frame(matrix(NA, nrow = 4, ncol = 3))
colnames(toGraph) <- c("language", "behavior", "probability")
toGraph$language <- c("English", "English", "Spanish-postnom.", "Spanish-postnom.")
toGraph$behavior <- c("Redundant color adjective (SS)", "Redundant size adjective (CS)",
"Redundant color adjective (SS)", "Redundant size adjective (CS)")
toGraph$probability <- probArray
p <- ggplot(toGraph, aes(x=language, y=probability, fill = behavior)) +
theme_bw() +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
ylab(element_blank()) +
xlab(element_blank()) +
geom_bar(stat="identity",position = "dodge") +
# scale_fill_viridis(discrete = TRUE) +
# color for the poster
scale_fill_manual(values=c("#4287f5","#fff200")) +
# for hypothetical graphs
theme(legend.title = element_blank(), legend.position="none", # axis.text.x = element_blank(),
axis.text.x = element_text(angle = 20, hjust=1),
)
return(p)
}
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START small blue pin STOP"))'
cmd_sp_postnom_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START pin blue small STOP"))'
cmd_eng_inc <- cmd_eng
cmd_sp_postnom_inc <- cmd_sp_postnom
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
standardGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Standard RSA")
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
crsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
incGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Incremental RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA")
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
legend <- plot_grid(get_legend(standardGraph + theme(legend.position = "bottom")))
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.9, 0.1))
ggsave(g, file = "modelcomparison_poster.pdf", height = 4, width = 4, units = "in", dpi = 1000)
cincrsaGraph + theme(legend.position = "bottom")
graph <- function(probArray) {
toGraph <- data.frame(matrix(NA, nrow = 4, ncol = 3))
colnames(toGraph) <- c("language", "behavior", "probability")
toGraph$language <- c("English", "English", "Spanish-postnom.", "Spanish-postnom.")
# toGraph$behavior <- c("Redundant color adjective (SS)", "Redundant size adjective (CS)",
# "Redundant color adjective (SS)", "Redundant size adjective (CS)")
# LABELS FOR POSTER
toGraph$behavior <- c("Redundant color adjective", "Redundant size adjective",
"Redundant color adjective", "Redundant size adjective")
toGraph$probability <- probArray
p <- ggplot(toGraph, aes(x=language, y=probability, fill = behavior)) +
theme_bw() +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
ylab(element_blank()) +
xlab(element_blank()) +
geom_bar(stat="identity",position = "dodge") +
# scale_fill_viridis(discrete = TRUE) +
# color for the poster
scale_fill_manual(values=c("#4287f5","#fff200")) +
# for hypothetical graphs
theme(legend.title = element_blank(), legend.position="none", # axis.text.x = element_blank(),
axis.text.x = element_text(angle = 20, hjust=1),
)
return(p)
}
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START small blue pin STOP"))'
cmd_sp_postnom_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START pin blue small STOP"))'
cmd_eng_inc <- cmd_eng
cmd_sp_postnom_inc <- cmd_sp_postnom
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 1, colorNoise = 1,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
standardGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Standard RSA")
v1 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = 0, sizeCost = 0, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
crsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 1, colorNoise = 1,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
incGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Incremental RSA")
v1 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_eng_ss))
v2 <- as.numeric(modelout(cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_eng_cs))
v3 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_ss, utterances_sp_postnom_ss))
v4 <- as.numeric(modelout(cmd_sp_postnom_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95,
colorCost = colorCost, sizeCost = sizeCost, nounCost = 0,
states_cs, utterances_sp_postnom_cs))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA")
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
legend <- plot_grid(get_legend(standardGraph + theme(legend.position = "bottom")))
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.9, 0.1))
ggsave(g, file = "modelcomparison_poster.pdf", height = 4, width = 4, units = "in", dpi = 1000)
rm(list = ls())
library(tidyverse)
library(shiny)
library(shinyjs)
library(rsconnect)
rsconnect::setAccountInfo(name='bwaldon',
token='2B9F9F6D91C01491BF65FF16284A4ADE',
secret='mXLXwxo15TntdN5s8vwyyjB4+FKUXAiH/5bqtimv')
colorOvermodification <- read_csv("colorOvermodification.csv") %>%
mutate(type = "color")
sizeOvermodification <- read_csv("sizeOvermodification.csv") %>%
mutate(type = "size")
df <- colorOvermodification %>%
bind_rows(sizeOvermodification)
library(tidyverse)
library(shiny)
library(shinyjs)
library(rsconnect)
rsconnect::setAccountInfo(name='bwaldon',
token='2B9F9F6D91C01491BF65FF16284A4ADE',
secret='mXLXwxo15TntdN5s8vwyyjB4+FKUXAiH/5bqtimv')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
colorOvermodification <- read_csv("colorOvermodification.csv") %>%
mutate(type = "color")
sizeOvermodification <- read_csv("sizeOvermodification.csv") %>%
mutate(type = "size")
df <- colorOvermodification %>%
bind_rows(sizeOvermodification)
rm(colorOvermodification, sizeOvermodification)
base = 8
expand = 6
ggplot(df %>% filter(colorNoise == 0.6, sizeNoise == 0.5, alpha == 5), aes(x = language, y = speakerProb, fill = type)) +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
xlab("Language/idiolect") +
ylab("Probability of\nredundant modification") +
labs(fill = "Overmodification type") +
theme(legend.position = "bottom",
text = element_text(size = base * expand / 2, face = "bold"))
# Define the UI
ui <- fluidPage(
titlePanel("Exploring the continuous-incremental RSA model"),
fluidRow(align = "center",column(4,
shinyWidgets::sliderTextInput("alpha","Alpha:" ,
choices = c(1,2.5,5,10,15,20)
)),
column(4,sliderInput("colorNoise", "Semantic value of color:",
min = 0.5, max = 1, value = 1, step = 0.1
)),
column(4,sliderInput("sizeNoise", "Semantic value of size:",
min = 0.5, max = 1, value = 1, step = 0.1
))),
fluidRow(align = "center", plotOutput('plot')),
br(),
br(),
fluidRow(align = "center", img(src = "table.png", width = 800)),
# fluidRow(
#   column(6, align = "center", img(src="colorsufficient.png", width = 300)),
#   column(6, align = "center", img(src="sizesufficient.png", width = 300))),
# fluidRow(column(6, align = "center", "Color-sufficient scene\n(Redundant size modification)"),
#          column(6, align = "center", "Size-sufficient scene\n(Redundant color modification)"))
)
# Define the server code
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(df %>% filter(colorNoise == input$colorNoise, sizeNoise == input$sizeNoise, alpha == input$alpha), aes(x = language, y = speakerProb, fill = type)) +
theme_bw() +
scale_fill_manual(values=c("#4287f5","#fff200")) +
geom_bar(stat="identity",position = "dodge") +
xlab("Language/idiolect") +
ylab("Probability of\nredundant modification") +
labs(fill = "Redundant modification type") +
theme(legend.position = "top",
text = element_text(size = base * expand / 2, face = "bold")) +
ylim(0, 1)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
colorOvermodification <- read_csv("colorOvermodification.csv") %>%
mutate(type = "color")
sizeOvermodification <- read_csv("sizeOvermodification.csv") %>%
mutate(type = "size")
df <- colorOvermodification %>%
bind_rows(sizeOvermodification)
rm(colorOvermodification, sizeOvermodification)
base = 8
expand = 6
ggplot(df %>% filter(colorNoise == 0.6, sizeNoise == 0.5, alpha == 5), aes(x = language, y = speakerProb, fill = type)) +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
xlab("Language/idiolect") +
ylab("Probability of\nredundant modification") +
labs(fill = "Overmodification type") +
theme(legend.position = "bottom",
text = element_text(size = base * expand / 2, face = "bold"))
# Define the UI
ui <- fluidPage(
titlePanel("Exploring the continuous-incremental RSA model"),
fluidRow(align = "center",column(4,
shinyWidgets::sliderTextInput("alpha","Alpha:" ,
choices = c(1,2.5,5,10,15,20)
)),
column(4,sliderInput("colorNoise", "Semantic value of color:",
min = 0.5, max = 1, value = 1, step = 0.1
)),
column(4,sliderInput("sizeNoise", "Semantic value of size:",
min = 0.5, max = 1, value = 1, step = 0.1
))),
fluidRow(align = "center", plotOutput('plot')),
br(),
br(),
fluidRow(align = "center", img(src = "www/table.png", width = 800)),
# fluidRow(
#   column(6, align = "center", img(src="colorsufficient.png", width = 300)),
#   column(6, align = "center", img(src="sizesufficient.png", width = 300))),
# fluidRow(column(6, align = "center", "Color-sufficient scene\n(Redundant size modification)"),
#          column(6, align = "center", "Size-sufficient scene\n(Redundant color modification)"))
)
# Define the server code
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(df %>% filter(colorNoise == input$colorNoise, sizeNoise == input$sizeNoise, alpha == input$alpha), aes(x = language, y = speakerProb, fill = type)) +
theme_bw() +
scale_fill_manual(values=c("#4287f5","#fff200")) +
geom_bar(stat="identity",position = "dodge") +
xlab("Language/idiolect") +
ylab("Probability of\nredundant modification") +
labs(fill = "Redundant modification type") +
theme(legend.position = "top",
text = element_text(size = base * expand / 2, face = "bold")) +
ylim(0, 1)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
runApp()
runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
?titlePanel
runApp()
?dashboardHeader
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?req
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(magick)
runApp()
