by = c("rowid","scene","goal","random_seed",
"objectOrder_data","objectOrder_predictions", "objects"))
output <- inner_join(output %>% select(-objects),
subdf_objects %>% select(-predictedProbs, -empiricalProbs),
by = c("rowid","scene","goal","random_seed",
"objectOrder_data","objectOrder_predictions"))
# ---
cilowdf_valueslong <- proportions_cilow %>%
unnest(selections) %>%
mutate(rowid = row_number())
cilowdf_objectslong <- proportions_cilow %>%
unnest(objects) %>%
mutate(rowid = row_number())
cilowdf <- inner_join(cilowdf_valueslong %>% select(-objects),
cilowdf_objectslong %>% select(-selections),
by = c("scene","goal","rowid")) %>%
rename(cilow = selections)
# ---
cihighdf_valueslong <- proportions_cihigh %>%
unnest(selections) %>%
mutate(rowid = row_number())
cihighdf_objectslong <- proportions_cihigh %>%
unnest(objects) %>%
mutate(rowid = row_number())
cihighdf <- inner_join(cihighdf_valueslong %>% select(-objects),
cihighdf_objectslong %>% select(-selections),
by = c("scene","goal","rowid")) %>%
rename(cihigh = selections)
output <- left_join(output, cilowdf, by = c("scene","goal","objects"))
output <- left_join(output, cihighdf, by = c("scene","goal","objects"))
return(output)
}
preds_full <- get_predictives("main", max_full, objectsDF, d_proportions,
getProportionData(d$data, ci.low),
getProportionData(d$data, ci.high))
preds_full_nogoal <- get_predictives("noGoal", max_full_nogoal, objectsDF, d_proportions,
getProportionData(d$data, ci.low),
getProportionData(d$data, ci.high))
graph_predictions_scatter <- function(predictives) {
predictives_transformed <- unique(predictives %>%
group_by(scene,goal,objects) %>%
mutate(prediction = mean(predictedProbs)) %>%
select(scene,goal,objects,prediction,empiricalProbs,cilow,cihigh))
View(predictives_transformed)
ggplot(predictives_transformed, aes(x = prediction, y = empiricalProbs)) +
geom_point(size = 0.3) +
theme_bw() +
geom_errorbar(aes(ymin = empiricalProbs - cilow, ymax= empiricalProbs + cihigh),
size=0.1) +
xlab("Predicted selection probability\n(mean of 20 BDA runs)") +
ylab("Observed selection probability") +
geom_abline(slope = 1) +
xlim(0,1) +
geom_text(x=0.1, y=0.8, label=sprintf("r = %f", cor(predictives_transformed$prediction,
predictives_transformed$empiricalProbs)))
}
graph_predictions_scatter(preds_full) + ggtitle("Predictions (main model)")
ggsave("BDAresults/preds-full.pdf", width = 4, height = 3, units = "in")
graph_predictions_scatter(preds_full_nogoal) + ggtitle("Predictions (noGoal model)")
ggsave("BDAresults/preds-nogoal-full.pdf", width = 4, height = 3, units = "in")
makeHardCaseData <- function(data, hardCaseBounds) {
hardcaseItems <- typicalityColumn %>%
filter(hardCaseBounds[1] < typicality & typicality < hardCaseBounds[2])
hardcaseData <- data %>%
select(name, goal, selections, objects)
excludeRows <- c()
for(i in seq(nrow(hardcaseData))){
hardcaseData$selections[i][[1]] <- Filter(function(i) { i %in% hardcaseItems$object }, hardcaseData$selections[i][[1]])
hardcaseData$objects[i][[1]] <- Filter(function(i) { i %in% hardcaseItems$object }, hardcaseData$objects[i][[1]])
if(length(hardcaseData$objects[i][[1]]) == 0){
excludeRows <- append(excludeRows, i)
}
}
return(hardcaseData[-excludeRows, ])
}
hardCaseData <- makeHardCaseData(d$data, c(0.25,0.75))
d_proportions_hardcase <- getProportionData(hardCaseData, mean)
inputData_inference_prop_hardcase <- list(objectProperties = objectsDF %>%
filter(object %in% unique(unlist(hardCaseData$objects))),
proportions = d_proportions_hardcase,
data = hardCaseData %>%
select(name, goal, selections) %>%
rename(scene = name))
posteriors_full_hardcase <- get_params("main", 1000, random_seed_vector, inputData_inference_prop_hardcase)
posteriors_full_nogoal_hardcase <- get_params("noGoal", 1000, random_seed_vector, inputData_inference_prop_hardcase)
max_full_hardcase <- param_maximums(posteriors_full_hardcase, c("alpha", "beta", "cost"))
max_full_nogoal_hardcase <- param_maximums(posteriors_full_nogoal_hardcase, c("alpha", "beta", "cost"))
save(posteriors_full_hardcase, posteriors_full_nogoal_hardcase, file = "posteriors_full_hardcase.RData")
rm(posteriors_full_hardcase,posteriors_full_nogoal_hardcase)
graph_max(max_full_hardcase) + ggtitle("Parameter estimates (main model, 20 runs, hard cases)")
ggsave("BDAresults/max_full_hardcase.pdf", width = 8, height = 4, units = "in")
graph_max(max_full_nogoal_hardcase) + ggtitle("Parameter estimates (noGoal model, 20 runs, hard cases)")
ggsave("BDAresults/max_full_nogoal_hardcase.pdf", width = 8, height = 4, units = "in")
preds_full_hardcase <- get_predictives("main", max_full_hardcase, objectsDF %>%
filter(object %in% unique(unlist(hardCaseData$objects))),
d_proportions_hardcase,
getProportionData(hardCaseData, ci.low),
getProportionData(hardCaseData, ci.high))
preds_full_nogoal_hardcase <- get_predictives("noGoal", max_full_nogoal_hardcase, objectsDF %>%
filter(object %in% unique(unlist(hardCaseData$objects))),
d_proportions_hardcase,
getProportionData(hardCaseData, ci.low),
getProportionData(hardCaseData, ci.high))
graph_predictions_scatter(preds_full_hardcase) + ggtitle("Predictions (main, 'hard cases')")
ggsave("BDAresults/preds-full-hardcase.pdf", width = 4, height = 3, units = "in")
graph_predictions_scatter(preds_full_nogoal_hardcase) + ggtitle("Predictions (noGoal, 'hard cases')")
ggsave("BDAresults/preds-full-nogoal-hardcase.pdf", width = 4, height = 3, units = "in")
model <- read_file("../../../models/model")
wpplHelpers <- read_file("../../../models/helpers")
veryhardCaseData <- makeHardCaseData(d$data, c(0.33,0.66))
d_proportions_veryhardcase <- getProportionData(veryhardCaseData, mean)
inputData_inference_prop_veryhardcase <- list(objectProperties = objectsDF %>%
filter(object %in% unique(unlist(veryhardCaseData$objects))),
proportions = d_proportions_veryhardcase,
data = veryhardCaseData %>%
select(name, goal, selections) %>%
rename(scene = name))
posteriors_full_veryhardcase <- get_params("main", 1000, random_seed_vector, inputData_inference_prop_veryhardcase)
posteriors_full_nogoal_veryhardcase <- get_params("noGoal", 1000, random_seed_vector, inputData_inference_prop_veryhardcase)
max_full_veryhardcase <- param_maximums(posteriors_full_veryhardcase, c("alpha", "beta", "cost"))
max_full_nogoal_veryhardcase <- param_maximums(posteriors_full_nogoal_veryhardcase, c("alpha", "beta", "cost"))
graph_max(max_full_veryhardcase) + ggtitle("Parameter estimates (main model, 20 runs, veryhard cases)")
ggsave("BDAresults/max_full_veryhardcase.pdf", width = 8, height = 4, units = "in")
graph_max(max_full_nogoal_veryhardcase) + ggtitle("Parameter estimates (noGoal model, 20 runs, veryhard cases)")
ggsave("BDAresults/max_full_nogoal_veryhardcase.pdf", width = 8, height = 4, units = "in")
preds_full_veryhardcase <- get_predictives("main", max_full_veryhardcase, objectsDF %>%
filter(object %in% unique(unlist(veryhardCaseData$objects))),
d_proportions_veryhardcase,
getProportionData(veryhardCaseData, ci.low),
getProportionData(veryhardCaseData, ci.high))
preds_full_nogoal_veryhardcase <- get_predictives("noGoal", max_full_nogoal_veryhardcase, objectsDF %>%
filter(object %in% unique(unlist(veryhardCaseData$objects))),
d_proportions_veryhardcase,
getProportionData(veryhardCaseData, ci.low),
getProportionData(veryhardCaseData, ci.high))
graph_predictions_scatter(preds_full_veryhardcase) + ggtitle("Predictions (main, 'very hard cases')")
ggsave("BDAresults/preds-full-veryhardcase.pdf", width = 4, height = 3, units = "in")
graph_predictions_scatter(preds_full_nogoal_veryhardcase) + ggtitle("Predictions (noGoal, 'very hard cases')")
ggsave("BDAresults/preds-full-nogoal-veryhardcase.pdf", width = 4, height = 3, units = "in")
save(posteriors_full_veryhardcase,posteriors_full_nogoal_veryhardcase, file = "posteriors_full_veryhardcase.RData")
rm(posteriors_full_veryhardcase,posteriors_full_nogoal_veryhardcase)
save.image()
graph_posteriors<- function(posteriors) {
ggplot(posteriors, aes(x = value)) +
facet_grid(random_seed~Parameter) +
geom_density() +
theme_bw() +
xlim(0,5)
}
graph_posteriors(posteriors_full_hardcase)
makeAccuracyComparisonDF <- function(predictives_main, predictives_nogoal) {
DF <- inner_join(predictives_main,predictives_nogoal, by =
c("scene","goal","empiricalProbs"))
}
makeAccuracyComparisonDF <- function(predictives_main, predictives_nogoal) {
DF <- inner_join(predictives_main,predictives_nogoal, by =
c("scene","goal","empiricalProbs"))
return(DF)
}
preds_full %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
t.test
?t.test
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(preds_full, preds_full_nogoal))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(preds_full, preds_full_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor))
}
rm(makeAccuracyComparisonDF)
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(preds_full, preds_full_nogoal))
view(correlations_main)
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(preds_full, preds_full_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(correlations_main)
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
return(t.test(correlations_main$cor,correlations_nogoal$cor))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(rbind(correlations_main, correlations_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(rbind(correlations_main, correlations_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor,
alternative = "greater"))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(rbind(correlations_main, correlations_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor,
alternative = "less"))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(rbind(correlations_main, correlations_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor,
alternative = "greater"))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest(preds_full_hardcase, preds_full_nogoal_hardcase)
accuracyComparisonTTest(preds_full_veryhardcase, preds_full_nogoal_veryhardcase)
960 / 20
960 / 20 / 12
960 / 20 / 4
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(rbind(correlations_main, correlations_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor,
alternative = "two-sided"))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest <- function(predictives_main, predictives_nogoal) {
correlations_main <- predictives_main %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
correlations_nogoal <- predictives_nogoal %>%
group_by(random_seed) %>%
summarize(cor = cor(empiricalProbs, predictedProbs))
view(rbind(correlations_main, correlations_nogoal))
return(t.test(correlations_main$cor,correlations_nogoal$cor,
alternative = "two.sided"))
}
accuracyComparisonTTest(preds_full, preds_full_nogoal)
accuracyComparisonTTest(preds_full_hardcase, preds_full_nogoal_hardcase)
accuracyComparisonTTest(preds_full_veryhardcase, preds_full_nogoal_veryhardcase)
preds_full %>%
group_by(random_seed) %>%
summarize(cor = cor(preds_full, preds_full_nogoal))
accuracyComparisonTTest(preds_full_hardcase, preds_full_nogoal_hardcase)
1920 / 20
96 / 4
View(typicalityColumn)
hardCaseData <- makeHardCaseData(d$data, c(0.2,0.8))
d_proportions_hardcase <- getProportionData(hardCaseData, mean)
inputData_inference_prop_hardcase <- list(objectProperties = objectsDF %>%
filter(object %in% unique(unlist(hardCaseData$objects))),
proportions = d_proportions_hardcase,
data = hardCaseData %>%
select(name, goal, selections) %>%
rename(scene = name))
posteriors_full_hardcase <- get_params("main", 1000, random_seed_vector, inputData_inference_prop_hardcase)
posteriors_full_nogoal_hardcase <- get_params("noGoal", 1000, random_seed_vector, inputData_inference_prop_hardcase)
max_full_hardcase <- param_maximums(posteriors_full_hardcase, c("alpha", "beta", "cost"))
max_full_nogoal_hardcase <- param_maximums(posteriors_full_nogoal_hardcase, c("alpha", "beta", "cost"))
save(posteriors_full_hardcase, posteriors_full_nogoal_hardcase, file = "posteriors_full_hardcase.RData")
rm(posteriors_full_hardcase,posteriors_full_nogoal_hardcase)
graph_max(max_full_hardcase) + ggtitle("Parameter estimates (main model, 20 runs, hard cases)")
ggsave("BDAresults/max_full_hardcase.pdf", width = 8, height = 4, units = "in")
graph_max(max_full_nogoal_hardcase) + ggtitle("Parameter estimates (noGoal model, 20 runs, hard cases)")
ggsave("BDAresults/max_full_nogoal_hardcase.pdf", width = 8, height = 4, units = "in")
preds_full_hardcase <- get_predictives("main", max_full_hardcase, objectsDF %>%
filter(object %in% unique(unlist(hardCaseData$objects))),
d_proportions_hardcase,
getProportionData(hardCaseData, ci.low),
getProportionData(hardCaseData, ci.high))
preds_full_nogoal_hardcase <- get_predictives("noGoal", max_full_nogoal_hardcase, objectsDF %>%
filter(object %in% unique(unlist(hardCaseData$objects))),
d_proportions_hardcase,
getProportionData(hardCaseData, ci.low),
getProportionData(hardCaseData, ci.high))
graph_predictions_scatter(preds_full_hardcase) + ggtitle("Predictions (main, 'hard cases')")
ggsave("BDAresults/preds-full-hardcase.pdf", width = 4, height = 3, units = "in")
graph_predictions_scatter(preds_full_nogoal_hardcase) + ggtitle("Predictions (noGoal, 'hard cases')")
ggsave("BDAresults/preds-full-nogoal-hardcase.pdf", width = 4, height = 3, units = "in")
accuracyComparisonTTest(preds_full_hardcase, preds_full_nogoal_hardcase)
0.7642960 ^ 2
0.7166116 ^ 2
save.image()
0.74 ^ 2
0.79 ^ 2
0.58 ^2
0.8 ^ 2
View(makeHardCaseData)
View(d_proportions)
View(d)
View(d)
?se
View(d_proportions)
View(preds_full)
View(d_proportions)
save.image()
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(jsonlite)
library(rwebppl)
source("../_shared/BDA_dataprep.R")
source("../_shared/wpplHelpers.R")
source("../_shared/BDA_vizhelpers.R")
d_uncollapsed <- read_csv("../../data/Degen2020/data.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d_uncollapsed <- read_csv("../../data/Degen2020/data.csv")
d_uncollapsed <- read_csv("../../data/Degen2020/bda_data.csv")
View(d_uncollapsed)
statesUtterances <- makeStatesUtterances(d_uncollapsed, "english")
View(statesUtterances)
d <- collapse_dataset(d_uncollapsed)
View(d)
df <- merge(d, statesUtterances, by = "condition")
View(df)
model <- makeModel("modelAndSemantics.txt")
vanillaInferenceScript <- wrapInference(model, "START size color STOP",
"color_size",
"vanilla")
view(modoel)
view(model)
View(model)
vanillaPosteriors <- webppl(vanillaInferenceScript, data = df, data_var = "df")
library(tidyverse)
library(rwebppl)
library(viridis)
library(grid)
library(cowplot)
library(magick)
library(jsonlite)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("../models/wpplfunctions.R")
speakermodels <- read_file("../models/speakermodels.txt")
cg_utterances <- c("START dress STOP", "START red dress STOP","START red object STOP")
cg_states <- c("R1","R2","R3")
cg_model <- makeModel("../models/CohnGordonetal/",cg_states, cg_utterances)
cg_sizeNoise = 1 # NO SIZE NOISE IN THE MODEL
source('~/Documents/GitHub/crossling_reference/simulations/sanity_checks.R', echo=TRUE)
source("../models/wpplfunctions.R")
speakermodels <- read_file("../models/speakermodels.txt")
cg_model <- makeModel("../models/CohnGordonetal/",cg_states, cg_utterances)
library(tidyverse)
library(grid)
library(gridExtra)
library(cowplot)
library(viridis)
library(jsonlite)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# faster than RWebPPL for this particular task, only because you get a persistent js
# environment in the background (rather than re-initializing js over and over agin)
source("../_shared/runwppl_fromweb.R")
engine <- read_file("../_shared/engine.txt")
modelAndSemantics <- read_file("models/pins/modelAndSemantics.txt")
states_cs = c("bigred", "smallblue", "smallred")
states_ss = c("bigblue", "bigred", "smallblue")
utterances_eng_ss <- c("START red pin STOP", "START blue pin STOP",
"START big pin STOP", "START small pin STOP",
"START big blue pin STOP",
"START big red pin STOP",
"START small blue pin STOP")
utterances_sp_split_ss <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START big pin blue STOP",
"START big pin red STOP",
"START small pin blue STOP")
utterances_sp_conj_ss <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START pin blue big STOP",
"START pin big blue STOP",
"START pin red big STOP",
"START pin big red STOP",
"START pin blue small STOP",
"START pin small blue STOP")
utterances_sp_postnom_ss <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START pin blue big STOP",
"START pin red big STOP",
"START pin blue small STOP")
# faster than RWebPPL for this particular task, only because you get a persistent js
# environment in the background (rather than re-initializing js over and over agin)
source("../_shared/runwppl_fromweb.R")
source('~/Documents/GitHub/crossling_reference/simulations/scil_simulations.R', echo=TRUE)
engine <- read_file("../_shared/engine.txt")
modelAndSemantics <- read_file("models/pins/modelAndSemantics.txt")
states_cs = c("bigred", "smallblue", "smallred")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# faster than RWebPPL for this particular task, only because you get a persistent js
# environment in the background (rather than re-initializing js over and over agin)
source("../_shared/runwppl_fromweb.R")
engine <- read_file("../_shared/engine.txt")
modelAndSemantics <- read_file("models/pins/modelAndSemantics.txt")
states_cs = c("bigred", "smallblue", "smallred")
states_ss = c("bigblue", "bigred", "smallblue")
utterances_eng_ss <- c("START red pin STOP", "START blue pin STOP",
"START big pin STOP", "START small pin STOP",
"START big blue pin STOP",
"START big red pin STOP",
"START small blue pin STOP")
utterances_sp_split_ss <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START big pin blue STOP",
"START big pin red STOP",
"START small pin blue STOP")
utterances_sp_conj_ss <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START pin blue big STOP",
"START pin big blue STOP",
"START pin red big STOP",
"START pin big red STOP",
"START pin blue small STOP",
"START pin small blue STOP")
utterances_sp_postnom_ss <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START pin blue big STOP",
"START pin red big STOP",
"START pin blue small STOP")
utterances_eng_cs <- c("START red pin STOP", "START blue pin STOP",
"START big pin STOP", "START small pin STOP",
"START big red pin STOP",
"START small blue pin STOP",
"START small red pin STOP")
utterances_sp_split_cs <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START big pin red STOP",
"START small pin blue STOP",
"START small pin red STOP")
utterances_sp_conj_cs <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START pin red big STOP",
"START pin big red STOP",
"START pin blue small STOP",
"START pin small blue STOP",
"START pin red small STOP",
"START pin small red STOP")
utterances_sp_postnom_cs <- c("START pin red STOP", "START pin blue STOP",
"START pin big STOP", "START pin small STOP",
"START pin red big STOP",
"START pin blue small STOP",
"START pin red small STOP")
cmd_eng = 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", model, params, semantics(params))'
cmd_sp_split = 'incrementalUtteranceSpeaker("START small pin blue STOP", "smallblue", model, params, semantics(params))'
cmd_sp_conj = 'incrementalUtteranceSpeaker("START pin blue small STOP", "smallblue", model, params, semantics(params)) + incrementalUtteranceSpeaker("START pin small blue STOP", "smallblue", model, params, semantics(params))'
cmd_sp_postnom = 'incrementalUtteranceSpeaker("START pin blue small STOP", "smallblue", model, params, semantics(params))'
modelout <- function(cmd, alpha, sizeNoiseVal, colorNoiseVal, sizeCost, colorCost, nounCost, states, utterances) {
preamble <- sprintf("var params = {
alpha : %f,
sizeNoiseVal : %f,
colorNoiseVal : %f,
sizeCost : %f,
colorCost : %f,
nounCost : %f
} \n
var model = extend(model(params), \n {states : %s, utterances : %s})
", alpha, sizeNoiseVal, colorNoiseVal, sizeCost, colorCost, nounCost, toJSON(states), toJSON(utterances))
code <- paste(modelAndSemantics, preamble, engine, cmd, sep = "\n")
return(evalWebPPL_V8(code))
}
modelout <- function(cmd, alpha, sizeNoiseVal, colorNoiseVal, sizeCost, colorCost, nounCost, states, utterances) {
preamble <- sprintf("var params = {
alpha : %f,
sizeNoiseVal : %f,
colorNoiseVal : %f,
sizeCost : %f,
colorCost : %f,
nounCost : %f
} \n
var model = extend(model(params), \n {states : %s, utterances : %s})
", alpha, sizeNoiseVal, colorNoiseVal, sizeCost, colorCost, nounCost, toJSON(states), toJSON(utterances))
code <- paste(modelAndSemantics, preamble, engine, cmd, sep = "\n")
return(evalWebPPL_V8(code))
}
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START small blue pin STOP"))'
cmd_sp_postnom_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", model, params, semantics(params)).score("START pin blue small STOP"))'
