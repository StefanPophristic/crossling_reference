scale_x_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_y_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_colour_viridis(limits=c(0,1), name="Probability of utterance") +
facet_grid(alpha~language) +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
theme(panel.spacing=unit(.25, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.text.x = element_text(angle = 90, hjust=1),
axis.text.y = element_text(hjust=0.5)) +
xlab(element_blank()) +
ylab(element_blank())
return(p)
}
color_plot <- plot(colorOvermodification) +
theme(strip.text.y = element_blank(),
legend.position = "none") +
ggtitle("Redundant color modification")
size_plot <- plot(sizeOvermodification) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none") +
ylab(element_blank()) +
ggtitle("Redundant size modification")
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "bottom")))
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4.5, width = 6.25, units = "in", dpi = 1000)
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
library(tidyverse)
library(bootstrap)
library(EnvStats)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_delim("full_untrained.csv", delim = "\t") %>%
filter(run != "run")
d$prediction <- as.numeric(d$prediction)
d$observed <- as.numeric(d$observed)
d$predicted <- d$prediction
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
s <- d %>%
group_by(fips) %>%
summarize(prediction = mean(predicted),
CILow =ci.low(predicted),
CIHigh =ci.high(predicted),
observation = mean(observed))
m <- lm(observation ~ prediction, data = s)
ggplot(s, aes(x=observation, y=prediction)) +
geom_point(color = "red") +
theme_bw() +
stat_smooth(method = 'lm') +
labs(y = "Predicted change in social distancing", x = "Observed change in social distancing") +
# ggtitle(paste("BERT model predictions (average of 20 runs)")) +
geom_errorbar(mapping=(aes(x = observation, ymin=prediction-CILow, ymax=prediction+CIHigh) ),position=position_dodge(0.05))
d <- read_delim("full.csv", delim = "\t") %>%
filter(run != "run")
d$prediction <- as.numeric(d$prediction)
d$observed <- as.numeric(d$observed)
d$predicted <- d$prediction
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
s <- d %>%
group_by(fips) %>%
summarize(prediction = mean(predicted),
CILow =ci.low(predicted),
CIHigh =ci.high(predicted),
observation = mean(observed))
m <- lm(observation ~ prediction, data = s)
ggplot(s, aes(x=observation, y=prediction)) +
geom_point(color = "red") +
theme_bw() +
stat_smooth(method = 'lm') +
labs(y = "Predicted change in social distancing", x = "Observed change in social distancing") +
# ggtitle(paste("BERT model predictions (average of 20 runs)")) +
geom_errorbar(mapping=(aes(x = observation, ymin=prediction-CILow, ymax=prediction+CIHigh) ),position=position_dodge(0.05))
summary(m)
View(d)
hoax_results <- qual_results("EMNLP/hoax_trained.csv")
qual_results <- function(filename) { return(read_delim(filename, delim = "\t") %>%
filter(run != "run") %>%
gather(key = "type", value = "prediction", control_predictions:experimental_predictions) %>%
mutate(prediction = as.numeric(prediction))) }
hoax_results <- qual_results("EMNLP/hoax_trained.csv")
flu_results <- qual_results("EMNLP/flu_trained.csv")
qual_results <- function(filename) { return(read_delim(filename, delim = "\t") %>%
filter(run != "run") %>%
gather(key = "type", value = "prediction", control_predictions:experimental_predictions) %>%
mutate(prediction = as.numeric(prediction))) }
left_results <- qual_results("EMNLP/left_trained.csv") %>%
filter(run != "untrained") %>%
distinct(run, type, .keep_all = TRUE)
qual_results <- function(filename) { return(read_delim(filename, delim = "\t") %>%
filter(run != "run") %>%
gather(key = "type", value = "prediction", control_predictions:experimental_predictions) %>%
mutate(prediction = as.numeric(prediction))) }
left_results <- qual_results("EMNLP/left_trained.csv") %>%
filter(run != "untrained") %>%
distinct(run, type, .keep_all = TRUE)
left_results_control <- left_results %>% filter(type == "control_predictions") %>% arrange(run)
left_results_exp <- left_results %>% filter(type == "experimental_predictions") %>% arrange(run)
left_test <- twoSamplePermutationTestLocation(left_results_control$prediction, left_results_exp$prediction, fcn = "mean", alternative = "two.sided",
mu1.minus.mu2 = 0, paired = TRUE, exact = FALSE, n.permutations = 5000,
seed = NULL, tol = sqrt(.Machine$double.eps))
flu_results <- qual_results("EMNLP/flu_trained.csv") %>%
filter(run != "untrained") %>%
distinct(run, type, .keep_all = TRUE)
flu_results_control <- flu_results %>% filter(type == "control_predictions") %>% arrange(run)
flu_results_exp <- flu_results %>% filter(type == "experimental_predictions") %>% arrange(run)
flu_test <- twoSamplePermutationTestLocation(flu_results_control$prediction, flu_results_exp$prediction, fcn = "mean", alternative = "two.sided",
mu1.minus.mu2 = 0, paired = TRUE, exact = FALSE, n.permutations = 5000,
seed = NULL, tol = sqrt(.Machine$double.eps))
hoax_results <- qual_results("EMNLP/hoax_trained.csv") %>%
filter(run != "untrained") %>%
distinct(run, type, .keep_all = TRUE)
hoax_results_control <- hoax_results %>% filter(type == "control_predictions") %>% arrange(run)
hoax_results_exp <- hoax_results %>% filter(type == "experimental_predictions") %>% arrange(run)
hoax_test <- twoSamplePermutationTestLocation(hoax_results_control$prediction, hoax_results_exp$prediction, fcn = "mean", alternative = "two.sided",
mu1.minus.mu2 = 0, paired = TRUE, exact = FALSE, n.permutations = 5000,
seed = NULL, tol = sqrt(.Machine$double.eps))
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
(mean(hoax_results_exp$prediction) - mean(hoax_results_control$prediction)) / mean(hoax_results_control$prediction)
(mean(left_results_exp$prediction) - mean(left_results_control$prediction)) / mean(left_results_control$prediction)
(mean(flu_results_exp$prediction) - mean(flu_results_control$prediction)) / mean(flu_results_control$prediction)
hoaxPchange <- ((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
hoax_results_exp$prediction
mean(hoax_results_exp$prediction)
mean(hoax_results_control$prediction)
mean(flu_results_control$prediction)
mean(flu_results_exp$prediction)
mean(left_results_control$prediction)
mean(left_results_exp$prediction)
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction))
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction))
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
mean((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
mean((left_results_exp$prediction - left_results_control$prediction) / left_results_control$prediction)
(mean(hoax_results_exp$prediction) - mean(hoax_results_control$prediction) / mean(hoax_results_control$prediction))
(mean(hoax_results_exp$prediction) - mean(hoax_results_control$prediction)) / mean(hoax_results_control$prediction))
((mean(hoax_results_exp$prediction) - mean(hoax_results_control$prediction)) / mean(hoax_results_control$prediction))
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
mean((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
mean((left_results_exp$prediction - left_results_control$prediction) / left_results_control$prediction)
View(qual_results("EMNLP/hoax_trained.csv"))
mean(hoax_results_exp$prediction)
mean(hoax_results_control$prediction)
mean(flu_results_control$prediction)
mean(flu_results_exp$prediction)
mean(left_results_control$prediction)
mean(left_results_exp$prediction)
(mean(hoax_results_exp$prediction) - mean(hoax_results_control$prediction)) / mean(hoax_results_control$prediction)
mean((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
mean((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
mean((left_results_exp$prediction - left_results_control$prediction) / left_results_control$prediction)
qual_results("EMNLP/flu_trained.csv")
View(qual_results("EMNLP/flu_trained.csv"))
hoaxPchange <- ((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
oneSamplePermutationTest(hoaxPchange, alternative = "less", mu = 0.07, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
fluPchange <- ((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
oneSamplePermutationTest(fluPchange, alternative = "less", mu = 0.01, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
leftPchange <- ((left_results_exp$prediction - left_results_control$prediction) / left_results_control$prediction)
oneSamplePermutationTest(leftPchange, alternative = "less", mu = -0.106, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
mean(hoaxPchange)
mean(fluPchange)
mean(leftPchange)
View(qual_results("EMNLP/left_trained.csv"))
left_results <- qual_results("EMNLP/left_trained.csv") %>%
filter(run != "untrained") %>%
distinct(run, type, .keep_all = TRUE)
View(left_results)
View(qual_results("EMNLP/left_trained.csv"))
View(qual_results("EMNLP/fraud_trained.csv"))
View(qual_results("EMNLP/hoax_trained.csv"))
View(qual_results("EMNLP/flu_trained.csv"))
mean(fluPchange)
mean(hoaxPchange)
mean(leftPchange)
(flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
(flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction))
(flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction
fluPchange <- ((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
oneSamplePermutationTest(fluPchange, alternative = "less", mu = 0.01, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
fluPchange <- ((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
oneSamplePermutationTest(fluPchange, alternative = "less", mu = 0.01, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
fluPchange <- ((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
oneSamplePermutationTest(fluPchange, alternative = "less", mu = 0.0179, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
hoaxPchange <- ((hoax_results_exp$prediction - hoax_results_control$prediction) / hoax_results_control$prediction)
oneSamplePermutationTest(hoaxPchange, alternative = "less", mu = 0.0734, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
fluPchange <- ((flu_results_exp$prediction - flu_results_control$prediction) / flu_results_control$prediction)
oneSamplePermutationTest(fluPchange, alternative = "less", mu = 0.0179, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
leftPchange <- ((left_results_exp$prediction - left_results_control$prediction) / left_results_control$prediction)
oneSamplePermutationTest(leftPchange, alternative = "less", mu = -0.106, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
oneSamplePermutationTest(leftPchange, alternative = "less", mu = -0.106, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
oneSamplePermutationTest(leftPchange, alternative = "less", mu = -0.106, exact = FALSE,
n.permutations = 50000, seed = NULL)$p.value
mean(hoaxPchange)
mean(fluPchange)
mean(leftPchange)
graph <- function(probArray) {
toGraph <- data.frame(matrix(NA, nrow = 4, ncol = 3))
colnames(toGraph) <- c("language", "behavior", "probability")
toGraph$language <- c("English", "English", "Spanish-postnom.", "Spanish-postnom.")
toGraph$behavior <- c("Redundant color adjective", "Redundant size adjective",
"Redundant color adjective", "Redundant size adjective")
toGraph$probability <- probArray
p <- ggplot(toGraph, aes(x=language, y=probability, fill = behavior)) +
theme_bw() +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
ylab(element_blank()) +
xlab(element_blank()) +
geom_bar(stat="identity",position = "dodge") +
scale_fill_viridis(discrete = TRUE) +
# for hypothetical graphs
theme(legend.title = element_blank(), legend.position="none", # axis.text.x = element_blank(),
axis.text.x = element_text(angle = 20, hjust=1),
)
return(p)
}
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.85, 0.15))
g
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot, legend), ncol = 3, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2, heights=c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2, heights=c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
g <- arrangeGrob(graphs, legend, ncol = 2)
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
graphs
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2)
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 6.25, units = "in", dpi = 1000)
g <- arrangeGrob(graphs, legend, ncol = 2, widths = c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 8, units = "in", dpi = 1000)
plot <- function(probDF) {
probDF$speakerProb <- as.numeric(probDF$speakerProb)
p <- ggplot(probDF, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=5,shape=15) +
scale_x_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_y_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_colour_viridis(limits=c(0,1), name="Probability of\nutterance") +
facet_grid(alpha~language) +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
theme(panel.spacing=unit(.25, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.text.x = element_text(angle = 45, hjust=1),
axis.text.y = element_text(hjust=0.5)) +
xlab(element_blank()) +
ylab(element_blank())
return(p)
}
color_plot <- plot(colorOvermodification) +
theme(strip.text.y = element_blank(),
legend.position = "none") +
ggtitle("Redundant color modification")
size_plot <- plot(sizeOvermodification) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none") +
ylab(element_blank()) +
ggtitle("Redundant size modification")
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2, widths = c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 8, units = "in", dpi = 1000)
plot <- function(probDF) {
probDF$speakerProb <- as.numeric(probDF$speakerProb)
p <- ggplot(probDF, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=5,shape=15) +
scale_x_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_y_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_colour_viridis(limits=c(0,1), name="Probability of\nutterance") +
facet_grid(alpha~language) +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
theme(panel.spacing=unit(.25, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.text.x = element_text(angle = 45, hjust=1),
axis.text.y = element_text(hjust=0.5)) +
xlab(element_blank()) +
ylab(element_blank())
return(p)
}
color_plot <- plot(colorOvermodification) +
theme(strip.text.y = element_blank(),
legend.position = "none") +
ggtitle("Redundant color modification")
size_plot <- plot(sizeOvermodification) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none") +
ylab(element_blank()) +
ggtitle("Redundant size modification")
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2, widths = c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 8, units = "in", dpi = 1000)
plot <- function(probDF) {
probDF$speakerProb <- as.numeric(probDF$speakerProb)
p <- ggplot(probDF, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=5,shape=15) +
scale_x_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_y_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_colour_viridis(limits=c(0,1), name="Probability of\nutterance") +
facet_grid(alpha~language) +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
theme(panel.spacing=unit(.25, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.text.x = element_text(angle = 20, hjust=1),
axis.text.y = element_text(hjust=0.5)) +
xlab(element_blank()) +
ylab(element_blank())
return(p)
}
color_plot <- plot(colorOvermodification) +
theme(strip.text.y = element_blank(),
legend.position = "none") +
ggtitle("Redundant color modification")
size_plot <- plot(sizeOvermodification) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none") +
ylab(element_blank()) +
ggtitle("Redundant size modification")
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2, widths = c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 8, units = "in", dpi = 1000)
plot <- function(probDF) {
probDF$speakerProb <- as.numeric(probDF$speakerProb)
p <- ggplot(probDF, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=5,shape=15) +
scale_x_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_y_continuous(limits=c(.45,1.0),breaks=seq(.475,1.0,.525),labels=c(0.5,1)) +
scale_colour_viridis(limits=c(0,1), name="Probability of\nutterance") +
facet_grid(alpha~language) +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
theme(panel.spacing=unit(.25, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
# axis.text.x = element_text(angle = 20, hjust=1),
axis.text.y = element_text(hjust=0.5)) +
xlab(element_blank()) +
ylab(element_blank())
return(p)
}
color_plot <- plot(colorOvermodification) +
theme(strip.text.y = element_blank(),
legend.position = "none") +
ggtitle("Redundant color modification")
size_plot <- plot(sizeOvermodification) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none") +
ylab(element_blank()) +
ggtitle("Redundant size modification")
legend <- plot_grid(get_legend(color_plot + theme(legend.position = "right")))
graphs <- arrangeGrob(grobs = list(color_plot, size_plot), ncol = 2, bottom = 'Semantic value of size', left = 'Semantic value of color', right = 'Alpha')
g <- arrangeGrob(graphs, legend, ncol = 2, widths = c(0.85, 0.15))
ggsave(g, filename = "scilpreds.pdf", height = 4, width = 8, units = "in", dpi = 1000)
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
nounCost <- 0
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", states, utterancesEnglish).score("START small blue pin STOP"))'
# cmd_sp_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", states, utterancesSpanish).score("START small pin blue STOP"))'
cmd_ar_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", states, utterancesArabic).score("START pin blue small STOP"))'
cmd_eng_inc <- cmd_eng
cmd_ar_inc <- cmd_ar
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
standardGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Standard RSA")
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
crsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous RSA")
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
incGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Incremental RSA")
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA")
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
legend <- plot_grid(get_legend(standardGraph + theme(legend.position = "bottom")))
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.9, 0.1))
ggsave(g, file = "modelcomparison.pdf", height = 4, width = 4, units = "in", dpi = 1000)
base = 6
expand = 3
graph <- function(probArray) {
toGraph <- data.frame(matrix(NA, nrow = 4, ncol = 3))
colnames(toGraph) <- c("language", "behavior", "probability")
toGraph$language <- c("English", "English", "Spanish-postnom.", "Spanish-postnom.")
toGraph$behavior <- c("Redundant color adjective (SS)", "Redundant size adjective (CS)",
"Redundant color adjective (SS)", "Redundant size adjective (CS)")
toGraph$probability <- probArray
p <- ggplot(toGraph, aes(x=language, y=probability, fill = behavior)) +
theme_bw() +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
ylab(element_blank()) +
xlab(element_blank()) +
geom_bar(stat="identity",position = "dodge") +
scale_fill_viridis(discrete = TRUE) +
# for hypothetical graphs
theme(legend.title = element_blank(), legend.position="none", # axis.text.x = element_blank(),
axis.text.x = element_text(angle = 20, hjust=1),
)
return(p)
}
globalalpha <- 30 #30
incalpha <- 7
sizeCost <- 0.1
colorCost <- 0.1
nounCost <- 0
cmd_eng_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", states, utterancesEnglish).score("START small blue pin STOP"))'
# cmd_sp_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", states, utterancesSpanish).score("START small pin blue STOP"))'
cmd_ar_global <- 'Math.exp(globalUtteranceSpeaker("smallblue", states, utterancesArabic).score("START pin blue small STOP"))'
cmd_eng_inc <- cmd_eng
cmd_ar_inc <- cmd_ar
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_global, globalalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
standardGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Standard RSA")
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_global, globalalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = 0, colorCost = 0))
crsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous RSA")
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_inc, incalpha, sizeNoise = 1, colorNoise = 1, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
incGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Incremental RSA")
v1 <- as.numeric(runWebPPL(model_ss, cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v2 <- as.numeric(runWebPPL(model_cs, cmd_eng_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v3 <- as.numeric(runWebPPL(model_ss, cmd_ar_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
v4 <- as.numeric(runWebPPL(model_cs, cmd_ar_inc, incalpha, sizeNoise = 0.8, colorNoise = 0.95, nounCost = nounCost,
sizeCost = sizeCost, colorCost = colorCost))
cincrsaGraph <- graph(c(v1,v2,v3,v4)) + ggtitle("Continuous\n-incremental RSA")
graphs <- arrangeGrob(grobs = list(standardGraph,crsaGraph,incGraph,cincrsaGraph), ncol = 2, left = 'Probability of utterance')
legend <- plot_grid(get_legend(standardGraph + theme(legend.position = "bottom")))
g <- arrangeGrob(graphs, legend, ncol = 1, heights=c(0.9, 0.1))
ggsave(g, file = "modelcomparison.pdf", height = 4, width = 4, units = "in", dpi = 1000)
