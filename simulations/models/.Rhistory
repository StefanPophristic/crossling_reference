test
parallel::detectCores()
getOption("Ncpus", 1L)
options(Ncpus = 4)
options(Ncpus = 6)
install.packages("tidyverse")
install.packages("openssl")
install.packages("tidyverse")
library(tidyverse)
install.packages("brms")
library("rstan")
data <- read.csv("~/Documents/GitHub/picturematching/data/experiment1/data.csv")
View(data)
mean(data$Answer.time_in_minutes)
library(tidyverse)
# for mapping
library(leaflet)
library(maptools)
# Download TIGER/Line shapefiles from the United States Census Bureau
# note: for me, this required brew install udunits & brew install gdal (on macos)
#
library(tigris)
install.packages('tigris')
# general toolkit for downloading, managing analyzing, and presenting data from the U.S. Census
library(acs)
library(brms)
install.packages("brms")
install.packages("brms")
# general toolkit for downloading, managing analyzing, and presenting data from the U.S. Census
library(acs)
?tracts
library(tidyverse)
# for mapping
library(leaflet)
library(maptools)
# Download TIGER/Line shapefiles from the United States Census Bureau
library(tigris)
# general toolkit for downloading, managing analyzing, and presenting data from the U.S. Census
library(acs)
?tracts
tracts <- tracts(cb=TRUE)
tracts <- tracts(states(), cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "TX", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
devtools::install_github("mhtess/rwebppl")
library(devtools)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("mhtess/rwebppl")
library(rwebppl)
library(readr)
model <- read_file("model.txt")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
model <- read_file("model.txt")
webppl(paste(model, model_eng_color_command, sep = "\n"))
model_eng_color_command <- 'print(incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesEnglish))'
model_eng_size_command <- 'print(incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesEnglish))'
model_ar_color_command <- 'print(incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesArabic))'
model_ar_size_command <- 'print(incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesArabic))'
webppl(paste(model, model_eng_color_command, sep = "\n"))
webppl(paste(model, model_eng_color_command, sep = "\n"))
webppl(model)
model <- read_file("model.txt")
webppl(model)
model <- read_file("model.txt")
webppl(model)
model <- read_file("model.txt")
webppl(model)
model_eng_color_command <- 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesEnglish)'
webppl(paste(model, model_eng_color_command, sep = "\n"))
model_eng_color_command <- 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesEnglish)'
model_eng_size_command <- 'incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesEnglish)'
model_ar_color_command <- 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesArabic)'
model_ar_size_command <- 'incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesArabic)'
model_eng_color_command <- 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesEnglish)'
model_eng_size_command <- 'incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesEnglish)'
model_ar_color_command <- 'incrementalUtteranceSpeaker("START pin blue small STOP", "smallblue", states, utterancesArabic)'
model_ar_size_command <- 'incrementalUtteranceSpeaker("START pin red big STOP", "bigred", states, utterancesArabic)'
webppl(paste(model, model_eng_color_command, sep = "\n"))
webppl(paste(model, model_eng_size_command, sep = "\n"))
webppl(paste(model, model_ar_color_command, sep = "\n"))
webppl(paste(model, model_ar_size_command, sep = "\n"))
?webppl
sprintf("%s is %f feet tall\n", "Sven", 7.1)
s <- sprintf("%s is %f feet tall\n", "Sven", 7.1)
s
rm(s)
runWebPPL <- function(model, command, alpha, colorNoise, sizeNoise) {
params <- sprintf("var alpha = %d \n
var sizeNoiseVal = %d \n
var colorNoiseVal = %d \n",
alpha, colorNoise, sizeNoise)
m <- paste(model, command, sep = "\n")
m <- paste(params, m, sep = "\n")
return(webppl(m))
}
model <- read_file("model.txt")
model_eng_color_command <- 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesEnglish)'
model_eng_size_command <- 'incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesEnglish)'
model_ar_color_command <- 'incrementalUtteranceSpeaker("START pin blue small STOP", "smallblue", states, utterancesArabic)'
model_ar_size_command <- 'incrementalUtteranceSpeaker("START pin red big STOP", "bigred", states, utterancesArabic)'
webppl(paste(model, model_eng_color_command, sep = "\n"))
webppl(paste(model, model_eng_size_command, sep = "\n"))
webppl(paste(model, model_ar_color_command, sep = "\n"))
webppl(paste(model, model_ar_size_command, sep = "\n"))
runWebPPL <- function(model, command, alpha, colorNoise, sizeNoise) {
params <- sprintf("var alpha = %d \n
var sizeNoiseVal = %d \n
var colorNoiseVal = %d \n",
alpha, colorNoise, sizeNoise)
m <- paste(model, command, sep = "\n")
m <- paste(params, m, sep = "\n")
return(webppl(m))
}
runWebPPL(model, model_eng_color_command, 5, 0.8, 0.99)
runWebPPL <- function(model, command, alpha, colorNoise, sizeNoise) {
params <- sprintf("var alpha = %f \n
var sizeNoiseVal = %f \n
var colorNoiseVal = %f \n",
alpha, colorNoise, sizeNoise)
m <- paste(model, command, sep = "\n")
m <- paste(params, m, sep = "\n")
return(webppl(m))
}
runWebPPL(model, model_eng_color_command, 5, 0.8, 0.99)
data.frame("colorNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "sizeNoise" = c(0.5,0.6,0.7,0.8,0.9,1))
data.frame("colorNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "sizeNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "alpha" = c(1,5,15,30))
data.frame("colorNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "sizeNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "alpha" = c(1,5,10,15,20,30))
valDF <- data.frame("colorNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "sizeNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "alpha" = c(1,5,10,15,20,30))
expand(valDF)
library(tidyverse)
expand(valDF)
expand(valDF)
valDF %>%
expand(colorNoise, sizeNoise, alpha)
valDF %>%
expand(colorNoise, sizeNoise, alpha) %>%
filter(alpha %in% c(1, 5, 15))
valDF <- valDF %>%
expand(colorNoise, sizeNoise, alpha) %>%
filter(alpha %in% c(1, 5, 15))
english_Color <- valDF %>%
mutate(speakerProb = runWebPPL(model, model_eng_color_command, alpha, colorNoise, sizeNoise))
runWebPPL(model, model_eng_color_command, 5, 0.8, 0.99)
english_Color <- valDF %>%
mutate(speakerProb = runWebPPL(model, model_eng_color_command, alpha = alpha, colorNoise = colorNoise, sizeNoise = sizeNoise))
View(valDF)
runWebPPL(model, model_eng_color_command, 5, 0.8, 0.99)
english_Color <- valDF %>%
mutate(speakerProb = runWebPPL(model, model_eng_color_command, alpha, colorNoise, sizeNoise))
-
model <- read_file("model.txt")
model <- read_file("model.txt")
runWebPPL(model, model_eng_color_command, 5, 0.8, 0.99)
english_Color <- valDF %>%
mutate(speakerProb = runWebPPL(model, model_eng_color_command, alpha, colorNoise, sizeNoise))
english_Color <- valDF %>%
group_by(colorNoise, sizeNoise, alpha) %>%
mutate(speakerProb = runWebPPL(model, model_eng_color_command, alpha, colorNoise, sizeNoise))
View(english_Color)
ggplot(english_Color, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=8,shape=15) +
scale_x_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_y_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_colour_gradientn(colors=rev(rainbow(4,start=0,end=4/6)),name="Probability\nof utterance") +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
facet_wrap(~alpha)
ggplot(english_Color, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=8,shape=15) +
scale_x_continuous(limits=c(.45,1),breaks=seq(.5,1,.2)) +
scale_y_continuous(limits=c(.45,1),breaks=seq(.5,1,.2)) +
scale_colour_gradientn(colors=rev(rainbow(4,start=0,end=4/6)),name="Probability\nof utterance") +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
facet_wrap(~alpha)
ggplot(english_Color, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=8,shape=15) +
scale_x_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_y_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_colour_gradientn(colors=rev(rainbow(4,start=0,end=4/6)),name="Probability\nof utterance") +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
facet_wrap(~alpha)
plot <- function(probDF) {
p <- ggplot(probDF, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=8,shape=15) +
scale_x_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_y_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_colour_gradientn(colors=rev(rainbow(4,start=0,end=4/6)),name="Probability\nof utterance") +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
facet_wrap(~alpha)
return(p)
}
english_Size <- valDF %>%
group_by(colorNoise, sizeNoise, alpha) %>%
mutate(speakerProb = runWebPPL(model, model_eng_size_command, alpha, colorNoise, sizeNoise))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
model <- read_file("model.txt")
model_eng_color_command <- 'incrementalUtteranceSpeaker("START small blue pin STOP", "smallblue", states, utterancesEnglish)'
model_eng_size_command <- 'incrementalUtteranceSpeaker("START big red pin STOP", "bigred", states, utterancesEnglish)'
model_ar_color_command <- 'incrementalUtteranceSpeaker("START pin blue small STOP", "smallblue", states, utterancesArabic)'
model_ar_size_command <- 'incrementalUtteranceSpeaker("START pin red big STOP", "bigred", states, utterancesArabic)'
runWebPPL <- function(model, command, alpha, colorNoise, sizeNoise) {
params <- sprintf("var alpha = %f \n
var sizeNoiseVal = %f \n
var colorNoiseVal = %f \n",
alpha, sizeNoise, colorNoise)
m <- paste(model, command, sep = "\n")
m <- paste(params, m, sep = "\n")
return(webppl(m))
}
runWebPPL(model, model_eng_color_command, 5, 0.8, 0.99)
valDF <- data.frame("colorNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "sizeNoise" = c(0.5,0.6,0.7,0.8,0.9,1), "alpha" = c(1,5,10,15,20,30))
valDF <- valDF %>%
expand(colorNoise, sizeNoise, alpha) %>%
filter(alpha %in% c(1, 5, 15))
english_Color <- valDF %>%
group_by(colorNoise, sizeNoise, alpha) %>%
mutate(speakerProb = runWebPPL(model, model_eng_color_command, alpha, colorNoise, sizeNoise))
english_Size <- valDF %>%
group_by(colorNoise, sizeNoise, alpha) %>%
mutate(speakerProb = runWebPPL(model, model_eng_size_command, alpha, colorNoise, sizeNoise))
arabic_Color <- valDF %>%
group_by(colorNoise, sizeNoise, alpha) %>%
mutate(speakerProb = runWebPPL(model, model_ar_color_command, alpha, colorNoise, sizeNoise))
arabic_Size <- valDF %>%
group_by(colorNoise, sizeNoise, alpha) %>%
mutate(speakerProb = runWebPPL(model, model_ar_size_command, alpha, colorNoise, sizeNoise))
plot <- function(probDF) {
p <- ggplot(probDF, aes(x=sizeNoise,y=colorNoise,color=speakerProb)) +
geom_point(size=8,shape=15) +
scale_x_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_y_continuous(limits=c(.45,1),breaks=seq(.5,1,.1)) +
scale_colour_gradientn(colors=rev(rainbow(4,start=0,end=4/6)),name="Probability\nof utterance") +
xlab("Semantic value of size") +
ylab("Semantic value of color") +
facet_wrap(~alpha)
return(p)
}
plot(english_Color)
plot(english_Size)
plot(english_Color)
plot(english_Size)
plot(english_Color)
plot(english_Size)
plot(arabic_Color)
plot(arabic_Size)
plot(english_Color)
plot(english_Size)
plot(arabic_Color)
plot(arabic_Size)
plot(english_Color)
plot(english_Size)
plot(english_Color)
plot(english_Size)
plot(arabic_Color)
plot(arabic_Size)
write_csv(arabic_Color,"arabic_Color.csv")
write_csv(arabic_Size,"arabic_Size.csv")
write_csv(english_Size,"english_Size.csv")
write_csv(english_Color,"english_Color.csv")
