oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
temp <- c()
for (i in 1:length(outputformatted)) {
temp <- append(temp, extractUtterances(outputformatted[i]))
}
temp
typeof(globalScenarios)
is.dataframe(globalScenarios)
is.data.frame(globalScenarios)
expandOutput <- function(outputUnformatted) {
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(temp, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
return(data.frame(utteranceList, outputNumbers))
}
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(temp, extractUtterances(outputformatted[i]))
}
data.frame(utteranceList, outputNumbers)
utteranceList
outputNumbers
globalScenarios[1,9]
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
print(oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(temp, extractUtterances(outputformatted[i]))
}
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
print(oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
utteranceList
data.frame(utteranceList, outputNumbers)
globalScenarios[1,9]
allGlobalUtterances <- lapply(globalScenarios$output, expandOutput())
#Get globalCont and globalBool scenarios
globalScenarios <- scenarios %>%
filter(scenarios$commandType == "globalBool" | scenarios$commandType == "globalCont")
#Expand the output of the global variables
expandOutput <- function(outputUnformatted) {
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
print(oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
print(utteranceList)
print(length(outputNumbers))
print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- lapply(globalScenarios$output, expandOutput())
#Get globalCont and globalBool scenarios
globalScenarios <- scenarios %>%
filter(scenarios$commandType == "globalBool" | scenarios$commandType == "globalCont")
#Expand the output of the global variables
expandOutput <- function(outputUnformatted) {
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
print(oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
print(utteranceList)
print(length(outputNumbers))
print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- lapply(globalScenarios$output, expandOutput())
#Expand the output of the global variables
expandOutput <- function(outputUnformatted) {
tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(tester, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
print(utteranceList)
print(length(outputNumbers))
print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- lapply(globalScenarios$output, expandOutput())
#Expand the output of the global variables
expandOutput <- function(outputUnformatted) {
#tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(outputUnformatted, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
print(utteranceList)
print(length(outputNumbers))
print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- lapply(globalScenarios$output, expandOutput())
allGlobalUtterances <- sapply(globalScenarios$output, expandOutput())
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput())
library(tidyverse)
library(grid)
library(gridExtra)
library(cowplot)
library(viridis)
library(jsonlite)
install.packages('varhandle')
library('varhandle')
install.packages("varhandle")
library(tidyverse)
library(grid)
library(gridExtra)
library(cowplot)
library(viridis)
library(jsonlite)
library('varhandle')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# RUN WEBPPL FROM A V8 JS ENGINE (FASTER WHEN YOU NEED TO RUN MANY, MANY CALLS TO WEBPPL)
source("../../_shared/V8wppl.R")
# contains runModel function that interacts with V8 engine and runs the code
source("stefanSimulationHelpers.R")
# Source the engine
# Engine = basic RSA model in webppl code (all the speaker and listener functions)
engine <- read_file("../../_shared/engine.txt")
# load the functions that are required for the Serbo-Croatian semantics function to run
semanticHelperFunctions <- read_file("stefanModels/stefanSemanticHelperFunctions.txt")
# load in csv file with conditions to run
scenariosToRun <- read.csv("stefanModels/stefanScenarios.csv", as.is = TRUE)
params_test <- c(7, .8, 0.99, 1, 0.99, 0.1, 0.1, 0)
#     globalcont = global utterance/vanilla model with continuous/noisy semantics
#     incBool = incremental model with boolean semantics
#     incCont = incremental model with continuous semantics
#   target: target state
#   utterance: a single utterance which applies to at least one state in the list of states
#   model: string of JS code, model function which is needed in the RSA input with values pertaining to
#     this scenario
#   semantics: string of JS code, semantics function for Serbo-Croatian with values pertaining to this scenario
#   parameters:
# Output: A single number representing speaker probability of producing the given utterance and target
runModelWrapper <- function(states, commandType, command, target, utterance, allUtterances, model, semantics) {
####### ADD THE BOOLEAN SEMANTICS TO THIS ONCE YOU IMPLEMENT PARAMETERS CORRECTLY
runModel('V8', engine, model, semantics, semanticHelperFunctions, command, states, allUtterances,
alpha = 1, sizeNoiseVal =1, colorNoiseVal = 1,
genderNoiseVal = 1, nounNoiseVal = 1,
colorCost = 0, sizeCost = 0, nounCost = 0)
}
scenarios <- data.frame(scenariosToRun)
scenarios <- unfactor(test)
# Run the function on all the scenarios
scenarios <- scenarios %>%
mutate(output = sapply(
split(scenarios, 1:nrow(scenarios)),
function(x) do.call(runModelWrapper, x)
))
#Get globalCont and globalBool scenarios
globalScenarios <- scenarios %>%
filter(scenarios$commandType == "globalBool" | scenarios$commandType == "globalCont")
#Expand the output of the global variables
expandOutput <- function(outputUnformatted) {
#tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(outputUnformatted, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
print(utteranceList)
print(length(outputNumbers))
print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput())
globalScenarios$output
allGlobalUtterances <- globalScenarios %>%
select(output) %>%
apply(1,expandOutput())
View(globalScenarios)
#Expand the output of the global variables
expandOutput <- function(output) {
#tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(output, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
print(utteranceList)
print(length(outputNumbers))
print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput())
allGlobalUtterances <- globalScenarios %>%
select(output) %>%
apply(1,expandOutput())
allGlobalUtterances <- globalScenarios %>%
select(output) %>%
apply(1,expandOutput(output))
#lapply expandOutput function to every row
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput(output))
#lapply expandOutput function to every row
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput(0))
#lapply expandOutput function to every row
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput())
allGlobalUtterances <- globalScenarios %>%
mutate(test = sapply(
split(globalScenarios, 1:nrow(globalScenarios)),
function(x) do.call(expandOutput, x)
))
bran_test <- df([1,"doodle bob"],[2,"boodle dob"])
bran_test <- globalScenarios[1:2]
View(bran_test)
bran_test <- globalScenarios[9,1:2]
View(bran_test)
bran_test <- globalScenarios[1:2,9]
View(globalScenarios)
bran_test <- globalScenarios[1:2,2]
View(globalScenarios)
bran_test <- globalScenarios[1:2,2]
view(bran_test)
bran_test <- globalScenarios[1:2,9]
view(bran_test)
bran_test <- globalScenarios[9]
View(bran_test)
bran_func <- function(string) {
ifelse(string!="fun","no fun",paste(string))
}
bran_new <- apply(bran_test,1,bran_func())
bran_new <- apply(bran_test,1,bran_func(string))
bran_new <- apply(bran_test,1,bran_func(output))
bran_new <- apply(bran_test,1,bran_func
bran_new <- apply(bran_test,1,bran_func)
mutate(output = ifelse(string!="fun","no fun",paste(string)))
bran_func <- function(string) {
mutate(output = ifelse(string!="fun","no fun",paste(string)))
}
bran_func <- function(string) {
mutate(output = ifelse(string!="fun","no fun",paste(string)))
}
bran_new <- apply(bran_test,1,bran_func())
bran_new <- apply(bran_test,1,bran_func(output))
bran_new <- apply(bran_test,1,bran_func)
mutate(output = ifelse(string!="fun","no fun",paste(unique(string))))
ran_func <- function(string) {
mutate(output = ifelse(string!="fun","no fun",paste(unique(string))))
}
bran_new <- apply(bran_test,1,bran_func)
bran_func <- function() {
mutate(output = ifelse(string!="fun","no fun",paste(unique(string))))
}
bran_new <- apply(bran_test,1,bran_func)
bran_new <- apply(bran_test,1,bran_func())
bran_func <- function() {
mutate(output = ifelse(output!="fun","no fun",paste(unique(output))))
}
bran_new <- apply(bran_test,1,bran_func())
bran_new <- apply(bran_test,1,bran_func)
bran_new <- apply(bran_test,1,bran_func())
bran_func <- function(df) {
mutate(output = ifelse(output!="fun","no fun",paste(unique(output))))
}
bran_new <- apply(bran_test,1,bran_func())
bran_test %>%
rowwise() %>%
expandOutput()
bran_test <- globalScenarios[9]
bran_test <- globalScenarios[1:9,9]
bran_test <- globalScenarios[1:9,9]
bran_test <- globalScenarios[9,1:9]
bran_test <- globalScenarios[1:9]
bran_test %>%
rowwise() %>%
expandOutput()
bran_new <- bran_test %>%
rowwise() %>%
expandOutput()
#Expand the output of the global variables
expandOutput <- function(output) {
#tester <- globalScenarios[1,9]
#split up the input
outputformatted <- unlist(str_split(output, "\n"))
# get rid of the string "Marginal:"
outputformatted <- outputformatted[-1]
# extract the numbers from the output
outputNumbers <- as.numeric(unlist(regmatches(outputformatted,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",outputformatted))))
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
return(oneUtterance)
}
############
# THIS ISN"T WORKING SO I"M JUST GOING TO LOOP
#outputformatted <- lapply(outputformatted, extractUtterances())
utteranceList <- c()
for (i in 1:length(outputformatted)) {
utteranceList <- append(utteranceList, extractUtterances(outputformatted[i]))
}
# combine them into a data frame
# return data structure
print("______")
print(length(utteranceList))
# print(utteranceList)
print(length(outputNumbers))
# print(outputNumbers)
return(data.frame(utteranceList, outputNumbers))
}
#lapply expandOutput function to every row
allGlobalUtterances <- apply(globalScenarios$output, 1, expandOutput())
bran_test <- globalScenarios[1:9]
bran_new <- bran_test %>%
rowwise() %>%
expandOutput()
