getwd()
scenariosFinal <- read.csv("stefanTestScenarios/scenarios1.csv", as.is = TRUE)
#Only get the blue_cup_fem target utterances
scenario1 <- scenariosFinal %>%
filter(scenariosFinal$target == "blue_cup_fem" & scenariosFinal$states == "['blue_plate_masc', 'red_plate_masc', 'blue_cup_fem']")
graphScenario1 <- scenario1 %>%
group_by(commandType) %>%
mutate(identifier = commandType) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
scenario2 <- scenariosFinal %>%
filter(scenariosFinal$target == "small_blue_plate_masc" & scenariosFinal$states == "['big_blue_plate_masc', 'big_red_plate_masc', 'small_blue_plate_masc']")
graphScenario2 <- scenario2 %>%
group_by(commandType) %>%
mutate(identifier = commandType) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
scenario3 <- scenariosFinal %>%
filter(scenariosFinal$target == "small_blue_plate_masc" & scenariosFinal$states == "['small_red_plate_masc', 'big_red_plate_masc', 'small_blue_plate_masc']")
graphScenario3 <- scenario3 %>%
group_by(commandType) %>%
mutate(identifier = commandType) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
View(scenariosFinal)
scenario4 <- scenariosFinal %>%
filter(scenariosFinal$target == "blue_cup_fem" & scenariosFinal$states == "['blue_plate_masc', 'red_plate_masc', 'blue_cup_fem', 'red_cup_fem']")
graphScenario4 <- scenario4 %>%
group_by(commandType) %>%
mutate(identifier = commandType) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario4
scenario5 <- scenariosFinal %>%
filter(scenariosFinal$target == "big_cup_fem" & scenariosFinal$states == "['big_plate_masc', 'small_plate_masc', 'big_cup_fem', 'small_cup_fem']")
graphScenario5 <- scenario5 %>%
group_by(commandType) %>%
mutate(identifier = commandType) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario5
library(tidyverse)
library(grid)
library(gridExtra)
library(cowplot)
library(viridis)
library(jsonlite)
library('varhandle')
# Set working directory = R code knows where to get relevant documents
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# RUN WEBPPL FROM A V8 JS ENGINE (FASTER WHEN YOU NEED TO RUN MANY, MANY CALLS TO WEBPPL)
source("../../_shared/V8wppl.R")
# Load all the functions found in stefanSimulationHelpers.R
#   This contains the runModel function that interacts with the V8 engine
#   and runs the code in Webppl online
source("stefanSimulationHelpers.R")
# Source the engine
# Engine = basic RSA model in webppl code (all the speaker and listener functions)
engine <- read_file("../../_shared/engine.txt")
# Load all the extra semantic functions that are required for the main Serbo-Croatian
#   semantics function to run, but that are not found in the csv file created by stefanAllScenarios.py
semanticHelperFunctions <- read_file("stefanModels/stefanSemanticHelperFunctions.txt")
# command: command/model type, aka is semantics boolean or continuous and
#       are we using the incremental or vanilla/global model
# target: the target object
# utterance: one of the utterances that could apply to that scenario. This field is NA
#       for global utterance commands because only the incremental utterance commands
#       require us to specify a single utterance
# model: RSA model function with all words and their noise/cost, this is a string
#       of javaScript code
# Semantics: RSA semantics function with all dictionary entries and their noise
#       this is a string of javaScript code
scenariosToRun <- read.csv("stefanModels/stefanScenario1.csv", as.is = TRUE)
# Do to a bug in the python script, we have duplicates of boolean semantic rows
# therefore we only want to get the unique rows
scenariosToRun <- unique(scenariosToRun)
#     globalcont = global utterance/vanilla model with continuous/noisy semantics
#     incBool = incremental model with boolean semantics
#     incCont = incremental model with continuous semantics
#   target: target state
#   utterance: a single utterance which applies to at least one state in the list of states
#   model: string of JS code, model function which is needed in the RSA input with values pertaining to
#     this scenario
#   semantics: string of JS code, semantics function for Serbo-Croatian with values pertaining to this scenario
#   parameters:
# Output: A single number representing speaker probability of producing the given utterance and target
runModelWrapper <- function(states, commandType, command, target, utterance, allUtterances, model, semantics,
alpha, sizeNoise, colorNoise, genderNoise, nounNoise, colorCost, sizeCost, nounCost) {
runModel('V8', engine, model, semantics, semanticHelperFunctions, command, states, allUtterances,
alpha, sizeNoise, colorNoise, genderNoise, nounNoise,
colorCost, sizeCost, nounCost)
}
# Turn the contents of the csv file into a data frame
scenarios <- data.frame(scenariosToRun)
# Run the model on all rows, each representing a single scenario with a specific set
# of parameters to be ran.
scenarios <- scenarios %>%
mutate(output = sapply(
split(scenarios, 1:nrow(scenarios)),
function(x) do.call(runModelWrapper, x)
))
globalScenarios <- scenarios %>%
filter(scenarios$commandType == "globalBool" | scenarios$commandType == "globalCont")
incrementalScenarios <- scenarios %>%
filter(scenarios$commandType == "incBool" | scenarios$commandType == "incCont")
incrementalScenarios$output <- as.numeric(incrementalScenarios$output)
# Function that expands the of the RSA models and turns them into a dataframe
# Input: String representing output of RSA model (for a single scenario)
# Output: a data frame with two columns: utterances and probabilities
expandOutput <- function(output) {
#output is a vector containing all unformatted outputs from the global contexts
# tester <- globalScenarios[19,17]
#split up the input
wordsAndNumbers <- unlist(str_split(output, "\n"))
# get rid of the string "Marginal:"
#wordsAndNumbers <- wordsAndNumbers[!grepl(paste0("Marginal:", collapse = "|"), wordsAndNumbers)]
wordsAndNumbers <- wordsAndNumbers[-1]
# extract the numbers from the output
# Treats "e-" in strings as something to separate the string by rather than part of the number
getNumbers <- function(fullString) {
#strings are of the following format:
#"    \"START plate_masc STOP\" : 1.5679677389425024e-7"
# split the string
splitString <- unlist(str_split(fullString, " : "))
#return the second element (i.e. just the number)
return(as.numeric(splitString[2]))
}
outputNumbers <- wordsAndNumbers %>% map_dbl(getNumbers)
#extract the utterances
extractUtterances <- function(oneUtterance) {
oneUtterance <- gsub('[[:digit:]]+', '', oneUtterance)
oneUtterance <- gsub('\" : .', '', oneUtterance)
oneUtterance <- gsub('    \"', '', oneUtterance)
oneUtterance <- gsub('e-', '', oneUtterance)
return(oneUtterance)
}
outputUtterances <- map_chr(wordsAndNumbers, extractUtterances)
return(data.frame(outputUtterances, outputNumbers))
}
# Expand the output of each scenario into the proper format and add it to the global scenarios data frame
globalScenarios$newDataFrames <- globalScenarios %>%
select(output) %>%
pmap(expandOutput)
#Expand the column with the newly formatted output
unnestedGlobal <- globalScenarios %>%
unnest_longer(newDataFrames)
# Copy over those values into non-nested columns and delete the nested data
unnestedGlobal$utterance <- unnestedGlobal$newDataFrames$outputUtterances
unnestedGlobal$output <- unnestedGlobal$newDataFrames$outputNumbers
unnestedGlobal <- unnestedGlobal %>%
select(-c(newDataFrames))
#Merge global back in with main
scenariosFinal <- bind_rows(incrementalScenarios, unnestedGlobal)
# Output this as a csv file so that we don't have to rerun this code again and again because it takes a long time
write.csv(scenariosFinal,"stefanTestScenarios/scenarios1Formatted.csv", row.names = FALSE)
#######
# In case you've already run the above code, and just want to analyze the data, without rerunning
# the code, import the csv file that was written above with the following two lines of code
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
scenariosFinal <- read.csv("stefanTestScenarios/scenarios1Formatted.csv", as.is = TRUE)
View(scenarios)
View(scenariosFinal)
graphScenario1 <- scenario1 %>%
group_by(commandType) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario1
#Only get the blue_cup_fem target utterances
scenario1 <- scenariosFinal %>%
filter(scenariosFinal$target == "blue_cup_fem" & scenariosFinal$states == "['blue_plate_masc', 'red_plate_masc', 'blue_cup_fem']")
View(scenario1)
graphScenario1 <- scenario1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario1
graphScenario1 <- scenario1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario1
#Only get the blue_cup_fem target utterances
scenario1 <- scenariosFinal %>%
filter(scenariosFinal$target == "blue_cup_fem" & scenariosFinal$states == "['blue_plate_masc', 'red_plate_masc', 'blue_cup_fem']")
scenarios1Cont <- scenarios1 %>%
filter(scenarios1$commandType == "globalCont" | scenarios1$commandType == "incCont")
#Only get the blue_cup_fem target utterances
scenario1 <- scenariosFinal %>%
filter(scenariosFinal$target == "blue_cup_fem" & scenariosFinal$states == "['blue_plate_masc', 'red_plate_masc', 'blue_cup_fem']")
scenarios1Cont <- scenario1 %>%
filter(scenario1$commandType == "globalCont" | scenario1$commandType == "incCont")
scenarios1Bool <- scenario1 %>%
filter(scenario1$commandType == "globalBool" | scenario1$commandType == "incBool")
graphScenario1Cont <- scenario1Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
scenario1Cont <- scenario1 %>%
filter(scenario1$commandType == "globalCont" | scenario1$commandType == "incCont")
scenario1Bool <- scenario1 %>%
filter(scenario1$commandType == "globalBool" | scenario1$commandType == "incBool")
graphScenario1Cont <- scenario1Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario1Cont
graphScenario1Cont <- scenario1Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario1Cont
scenario1GenderNoise1 <- scenario1 %>%
filter(scenario1$genderNoise == 1)
graphScenario1GenderNoise1 <- scenario1GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario1GenderNoise1
graphScenario1Cont
scenario2 <- scenariosFinal %>%
filter(scenariosFinal$target == "small_blue_plate_masc" & scenariosFinal$states == "['big_blue_plate_masc', 'big_red_plate_masc', 'small_blue_plate_masc']")
# split up scenario1 for graphs based on noun noise values
scenario2Cont <- scenario2 %>%
filter(scenario1$commandType == "globalCont" | scenario1$commandType == "incCont")
# split up scenario1 for graphs based on noun noise values
scenario2Cont <- scenario2 %>%
filter(scenario1$commandType == "globalCont" | scenario1$commandType == "incCont")
# split up scenario1 for graphs based on noun noise values
scenario2Cont <- scenario2 %>%
filter(scenario2$commandType == "globalCont" | scenario2$commandType == "incCont")
scenario2GenderNoise1 <- scenario1 %>%
filter(scenario2$genderNoise == 1)
scenario2GenderNoise1 <- scenario2 %>%
filter(scenario2$genderNoise == 1)
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario2Cont <- scenario2Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario1GenderNoise2 <- scenario1GenderNoise2 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# split up scenario1 for graphs based on noun noise values
scenario1Cont <- scenario1 %>%
filter(scenario1$commandType == "globalCont" | scenario1$commandType == "incCont")
scenario1GenderNoise1 <- scenario1 %>%
filter(scenario1$genderNoise == 1)
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario1Cont <- scenario1Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario1GenderNoise1 <- scenario1GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
scenario2 <- scenariosFinal %>%
filter(scenariosFinal$target == "small_blue_plate_masc" & scenariosFinal$states == "['big_blue_plate_masc', 'big_red_plate_masc', 'small_blue_plate_masc']")
# split up scenario1 for graphs based on noun noise values
scenario2Cont <- scenario2 %>%
filter(scenario2$commandType == "globalCont" | scenario2$commandType == "incCont")
scenario2GenderNoise1 <- scenario2 %>%
filter(scenario2$genderNoise == 1)
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario2Cont <- scenario2Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario2GenderNoise1 <- scenario2GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario2 <- scenario2 %>%
group_by(commandType) %>%
mutate(identifier = commandType) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario2GenderNoise1
graphScenario2
graphScenario2GenderNoise1
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario2Cont <- scenario2Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario2GenderNoise1 <- scenario2GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario2Cont
graphScenario2GenderNoise1
graphScenario2Cont
# SCENARIO 3
# ["small_red_plate_masc", "big_red_plate_masc", "small_blue_plate_masc"]
# color sufficient, size redundant
scenario3 <- scenariosFinal %>%
filter(scenariosFinal$target == "small_blue_plate_masc" & scenariosFinal$states == "['small_red_plate_masc', 'big_red_plate_masc', 'small_blue_plate_masc']")
# split up scenario1 for graphs based on noun noise values
scenario3Cont <- scenario3 %>%
filter(scenario3$commandType == "globalCont" | scenario3$commandType == "incCont")
scenario3GenderNoise1 <- scenario3 %>%
filter(scenario3$genderNoise == 1)
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario3Cont <- scenario3Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario3GenderNoise1 <- scenario3GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario3Cont
graphScenario3GenderNoise1
graphScenario3Cont
scenario4 <- scenariosFinal %>%
filter(scenariosFinal$target == "blue_cup_fem" & scenariosFinal$states == "['blue_plate_masc', 'red_plate_masc', 'blue_cup_fem', 'red_cup_fem']")
# split up scenario1 for graphs based on noun noise values
scenari4Cont <- scenario4 %>%
filter(scenario4$commandType == "globalCont" | scenario4$commandType == "incCont")
scenario4GenderNoise1 <- scenario4 %>%
filter(scenario4$genderNoise == 1)
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario4GenderNoise1 <- scenario4GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario4Cont <- scenario4Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# split up scenario1 for graphs based on noun noise values
scenari4Cont <- scenario4 %>%
filter(scenario4$commandType == "globalCont" | scenario4$commandType == "incCont")
# split up scenario1 for graphs based on noun noise values
scenario4Cont <- scenario4 %>%
filter(scenario4$commandType == "globalCont" | scenario4$commandType == "incCont")
scenario4GenderNoise1 <- scenario4 %>%
filter(scenario4$genderNoise == 1)
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario4Cont <- scenario4Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario4GenderNoise1 <- scenario4GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario4GenderNoise1
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario4Cont <- scenario4Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario4Cont
scenario5 <- scenariosFinal %>%
filter(scenariosFinal$target == "big_cup_fem" & scenariosFinal$states == "['big_plate_masc', 'small_plate_masc', 'big_cup_fem', 'small_cup_fem']")
# split up scenario1 for graphs based on noun noise values
scenario5Cont <- scenario5 %>%
filter(scenario5$commandType == "globalCont" | scenario5$commandType == "incCont")
scenario5GenderNoise1 <- scenario5 %>%
filter(scenario5$genderNoise == 1)
# Graph of all continous scenarios
# shows how graphs change by changing noise values
graphScenario5Cont <- scenario5Cont %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
# graph all instances where gender noise = 1
# comparison of all four models
graphScenario5GenderNoise1 <- scenario5GenderNoise1 %>%
group_by(commandType, genderNoise) %>%
mutate(identifier = paste("commandType: ", commandType, ", genderNoise: ", genderNoise, sep = "")) %>%
ggplot(aes(x=utterance,y=output)) +
geom_bar(stat="identity") +
facet_wrap(~identifier, ncol = 4) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
graphScenario5GenderNoise1
graphScenario5Cont
